<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GeneralPlatform_DAL</name>
    </assembly>
    <members>
        <member name="T:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDAEx">
            <summary>
            工程用户关系4同步(QxPrjUserRelation4Synch)
            (AutoGCLib.DALExCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDAEx.CopyTo(GeneralPlatform.Entity.clsQxPrjUserRelationEN,GeneralPlatform.Entity.clsQxPrjUserRelation4SynchEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxPrjUserRelation4SynchENS">源对象</param>
            <param name = "objQxPrjUserRelation4SynchENT">目标对象</param>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxServer4SynchDAEx">
            <summary>
            同步服务器(QxServer4Synch)
            (AutoGCLib.DALExCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDAEx">
            <summary>
            用户角色关系4同步(QxUserRoleRelation4Synch)
            (AutoGCLib.DALExCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDAEx.CopyTo(GeneralPlatform.Entity.clsQxUserRoleRelationEN,GeneralPlatform.Entity.clsQxUserRoleRelation4SynchEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxUserRoleRelation4SynchENS">源对象</param>
            <param name = "objQxUserRoleRelation4SynchENT">目标对象</param>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDAEx">
            <summary>
            v工程用户关系4同步(vQxPrjUserRelation4Synch)
            (AutoGCLib.DALExCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDAEx">
            <summary>
            v用户角色关系4同步(vQxUserRoleRelation4Synch)
            (AutoGCLib.DALExCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxUsers4SynchDAEx">
            <summary>
            vQxUsers4Synch(vQxUsers4Synch)
            (AutoGCLib.DALExCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxViewInfoDAEx">
            <summary>
            界面信息(QxViewInfo)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxViewPotenceDAEx">
            <summary>
            界面权限(QxViewPotence)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxViewInfoDAEx">
            <summary>
            v界面信息(vQxViewInfo)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxViewPotenceDAEx">
            <summary>
            v界面权限(vQxViewPotence)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsErrorInformationDAEx">
            <summary>
            错误信息(ErrorInformation)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsPageDispModeDAEx">
            <summary>
            页面显示模式(PageDispMode)
            (AutoGCLib.DALExCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDAEx.#ctor">
            <summary>
            构造函数
            (AutoGCLib.DALExCode4CSharp:Gen_DAEx_ClassConstructor1)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxPageDispModeDAEx">
            <summary>
            页面显示模式(QxPageDispMode)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxPrjMenusDAEx">
            <summary>
            工程菜单(QxPrjMenus)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDAEx.GetMenuIdEx(System.String)">
            <summary>
            
            </summary>
            <param name="strPrjId"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDAEx.GetMenuId4IsLeafEx(System.String)">
            <summary>
            
            </summary>
            <param name="strPrjId"></param>
            <returns></returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxPrjMenuSetDAEx">
            <summary>
            菜单集(QxPrjMenuSet)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxPrjMenusV2DAEx">
            <summary>
            工程菜单V2(QxPrjMenusV2)
            (AutoGCLib.DALExCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DAEx.#ctor">
            <summary>
            构造函数
            (AutoGCLib.DALExCode4CSharp:Gen_DAEx_ClassConstructor1)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxRoleMenusDAEx">
            <summary>
            角色菜单(QxRoleMenus)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxRoleMenusV2DAEx">
            <summary>
            角色菜单V2(QxRoleMenusV2)
            (AutoGCLib.DALExCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DAEx.#ctor">
            <summary>
            构造函数
            (AutoGCLib.DALExCode4CSharp:Gen_DAEx_ClassConstructor1)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUserMenuDetailDAEx">
            <summary>
            用户菜单(QxUserMenuDetail)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUserMenusDAEx">
            <summary>
            用户菜单(QxUserMenus)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxPrjMenusDAEx">
            <summary>
            v工程菜单(vQxPrjMenus)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxPrjMenuSetDAEx">
            <summary>
            v菜单集(vQxPrjMenuSet)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDAEx">
            <summary>
            v三层菜单(vQxPrjMenus_Leaf)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxPrjMenus_SubDAEx">
            <summary>
            v子层菜单(vQxPrjMenus_Sub)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxPrjMenus_UpDAEx">
            <summary>
            v顶层菜单(vQxPrjMenus_Up)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxRoleMenusDAEx">
            <summary>
            v角色菜单(vQxRoleMenus)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxRoleMenus_SimDAEx">
            <summary>
            v角色菜单_Sim(vQxRoleMenus_Sim)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxPotenceTypeDAEx">
            <summary>
            权限类型(QxPotenceType)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxPrjPotenceDAEx">
            <summary>
            工程权限(QxPrjPotence)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxPrjPotenceV2DAEx">
            <summary>
            工程权限V2(QxPrjPotenceV2)
            (AutoGCLib.DALExCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DAEx.#ctor">
            <summary>
            构造函数
            (AutoGCLib.DALExCode4CSharp:Gen_DAEx_ClassConstructor1)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDAEx">
            <summary>
            权限编程标志关系表(QxRelaOfPotenceAndSymbol)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxRolePotenceRelaDAEx">
            <summary>
            角色权限关系(QxRolePotenceRela)
            (AutoGCLib.DALExCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDAEx.#ctor">
            <summary>
            构造函数
            (AutoGCLib.DALExCode4CSharp:Gen_DAEx_ClassConstructor1)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDAEx">
            <summary>
            vPotenceSymbolForRole(vQxPotenceSymbolForRole)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxPotenceTypeDAEx">
            <summary>
            v权限类型(vQxPotenceType)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxPrjPotenceDAEx">
            <summary>
            v工程权限(vQxPrjPotence)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDAEx">
            <summary>
            v权限编程标志关系表(vQxRelaOfPotenceAndSymbol)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxCodeTypeDAEx">
            <summary>
            代码类型(QxCodeType)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxPrjFileRelaDAEx">
            <summary>
            项目相关文件(QxPrjFileRela)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDAEx">
            <summary>
            文件下载站点(QxPrjSite4DownLoad)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDAEx">
            <summary>
            用户下载日志细节(QxUserDownLoadDetailLog)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUserDownLoadLogDAEx">
            <summary>
            用户下载日志(QxUserDownLoadLog)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxPrjFileRelaDAEx">
            <summary>
            v项目相关文件(vQxPrjFileRela)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDAEx">
            <summary>
            v文件下载站点(vQxPrjSite4DownLoad)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDAEx">
            <summary>
            v用户下载日志细节(vQxUserDownLoadDetailLog)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxUserDownLoadLogDAEx">
            <summary>
            v用户下载日志(vQxUserDownLoadLog)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsDataBaseTypeDAEx">
            <summary>
            数据库类型(DataBaseType)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxFuncModuleDAEx">
            <summary>
            功能模块(QxFuncModule)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxFuncModule_AgcDAEx">
            <summary>
            功能模块_Agc(QxFuncModule_Agc)
            (AutoGCLib.DALExCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDAEx.#ctor">
            <summary>
            构造函数
            (AutoGCLib.DALExCode4CSharp:Gen_DAEx_ClassConstructor1)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxPrjDataBaseDAEx">
            <summary>
            数据库对象(QxPrjDataBase)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxPrjModuleDAEx">
            <summary>
            项目模块表(QxPrjModule)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxProjectsDAEx">
            <summary>
            工程表(QxProjects)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDAEx.GetProjectsEx(GeneralPlatform.Entity.clsQxProjectsENEx@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            </summary>
            <param name="objProjects">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxFuncModuleDAEx">
            <summary>
            vQxFuncModule(vQxFuncModule)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxFuncModule_AgcDAEx">
            <summary>
            v功能模块_Agc(vQxFuncModule_Agc)
            (AutoGCLib.DALExCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDAEx.#ctor">
            <summary>
            构造函数
            (AutoGCLib.DALExCode4CSharp:Gen_DAEx_ClassConstructor1)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxPrjDataBaseDAEx">
            <summary>
            v数据库对象(vQxPrjDataBase)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxPrjModuleDAEx">
            <summary>
            v项目模块表(vQxPrjModule)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsFuncModuleDAEx">
            <summary>
            构造函数
            (AutoGCLib.DALExCode4CSharp:Gen_DAEx_ClassConstructor1)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDAEx.GoTop(System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="lstKey"></param>
            <returns></returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvFuncModuleDAEx">
            <summary>
            v功能模块(vFuncModule)
            (AutoGCLib.DALExCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDAEx.#ctor">
            <summary>
            构造函数
            (AutoGCLib.DALExCode4CSharp:Gen_DAEx_ClassConstructor1)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxApplicationTypeDAEx">
            <summary>
            应用程序类型(QxApplicationType)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxDepartmentTypeDAEx">
            <summary>
            部门类型(QxDepartmentType)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUsers4SynchDAEx">
            <summary>
            用户4同步(QxUsers4Synch)
            (AutoGCLib.DALExCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDAEx.#ctor">
            <summary>
            构造函数
            (AutoGCLib.DALExCode4CSharp:Gen_DAEx_ClassConstructor1)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDAEx.CopyTo(GeneralPlatform.Entity.clsQxUsersEN,GeneralPlatform.Entity.clsQxUsers4SynchEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxUsers4SynchENS">源对象</param>
            <param name = "objQxUsers4SynchENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDAEx.CopyTo(GeneralPlatform.Entity.clsQxUsers4SynchEN,GeneralPlatform.Entity.clsQxUsersEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxUsers4SynchENS">源对象</param>
            <param name = "objQxUsers4SynchENT">目标对象</param>
        </member>
        <member name="T:GeneralPlatform.DAL.clsSubjectTypeDAEx">
            <summary>
            学科类型(SubjectType)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsTSysParaDAEx">
            <summary>
            系统参数(TSysPara)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsExportExcel4UsersDAEx">
            <summary>
            导出Excel用户字段表(ExportExcel4Users)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDAEx.GoTop(System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="lstKey"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDAEx.GoBottom(System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="lstKey"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDAEx.AdjustSequenceNumber(System.String,System.Int64)">
            <summary>
            
            </summary>
            <param name="strDirect"></param>
            <param name="strmId"></param>
            <returns></returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsExportExcelSetDAEx">
            <summary>
            导出Excel设置(ExportExcelSet)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUserCodePathDAEx">
            <summary>
            用户生成路径(QxUserCodePath)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsSetFieldVisibilityDAEx">
            <summary>
            设置字段可视性(SetFieldVisibility)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvExportExcel4UsersDAEx">
            <summary>
            v导出Excel用户字段表(vExportExcel4Users)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvExportExcelSetDAEx">
            <summary>
            v导出Excel设置(vExportExcelSet)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxUserCodePathDAEx">
            <summary>
            v用户生成路径(vQxUserCodePath)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvSetFieldVisibilityDAEx">
            <summary>
            v设置字段可视性(vSetFieldVisibility)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsXzSchoolDAEx">
            <summary>
            学校(XzSchool)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxPrjTabDAEx">
            <summary>
            工程表(QxPrjTab)
            (AutoGCLib.DALExCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDAEx.#ctor">
            <summary>
            构造函数
            (AutoGCLib.DALExCode4CSharp:Gen_DAEx_ClassConstructor1)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsSQLDSTypeDAEx">
            <summary>
            Sql数据源类型(SQLDSType)
            (AutoGCLib.DALExCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDAEx.#ctor">
            <summary>
            构造函数
            (AutoGCLib.DALExCode4CSharp:Gen_DAEx_ClassConstructor1)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsTabStateDAEx">
            <summary>
            表状态(TabState)
            (AutoGCLib.DALExCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDAEx.#ctor">
            <summary>
            构造函数
            (AutoGCLib.DALExCode4CSharp:Gen_DAEx_ClassConstructor1)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsTabTypeDAEx">
            <summary>
            表类型(TabType)
            (AutoGCLib.DALExCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDAEx.#ctor">
            <summary>
            构造函数
            (AutoGCLib.DALExCode4CSharp:Gen_DAEx_ClassConstructor1)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxPrjTabDAEx">
            <summary>
            v工程表(vQxPrjTab)
            (AutoGCLib.DALExCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDAEx.#ctor">
            <summary>
            构造函数
            (AutoGCLib.DALExCode4CSharp:Gen_DAEx_ClassConstructor1)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsSubjectRelationDAEx">
            <summary>
            隶属关系数据处理层扩展
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDAEx.GetUserIdLstByLeader(System.String)">
            <summary>
            根据领导（Leader）获取所管理的职工
            </summary>
            <param name="strLeaderId">领导ID</param>
            <returns>职工ID列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDAEx.CheckUniqueness(System.Int64,System.String,System.String)">
            <summary>
            检查唯一性（Uniqueness）
            </summary>
            <param name="lngmId">流水号（主键）</param>
            <param name="strUserId">用户ID（要求唯一的字段）</param>
            <param name="strLeaderId">领导Id（要求唯一的字段）</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDAEx.CheckUniqueness(System.String,System.String)">
            <summary>
            检查唯一性（Uniqueness）
            </summary>
            <param name="strUserId">用户ID（要求唯一的字段）</param>
            <param name="strLeaderId">领导Id（要求唯一的字段）</param>
            <returns></returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxDepartmentInfoDAEx">
            <summary>
            部门信息(QxDepartmentInfo)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDAEx.GoTop(System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="lstKey"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDAEx.GoBottom(System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="lstKey"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDAEx.ReOrder">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDAEx.AdjustSequenceNumber(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="strDirect"></param>
            <param name="strDepartmentId"></param>
            <returns></returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxDepartmentInfoV2DAEx">
            <summary>
            部门V2(QxDepartmentInfoV2)
            (AutoGCLib.DALExCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DAEx.#ctor">
            <summary>
            构造函数
            (AutoGCLib.DALExCode4CSharp:Gen_DAEx_ClassConstructor1)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxPrjUserRelationDAEx">
            <summary>
            工程用户关系(QxPrjUserRelation)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxRoleRightRelationDAEx">
            <summary>
            角色赋权关系(QxRoleRightRelation)
            (AutoGCLib.DALExCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDAEx.#ctor">
            <summary>
            构造函数
            (AutoGCLib.DALExCode4CSharp:Gen_DAEx_ClassConstructor1)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxRolesDAEx">
            <summary>
            角色(QxRoles)
            (AutoGCLib.DALExCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDAEx.GetRoleIdEx(System.String)">
            <summary>
            
            </summary>
            <param name="strPrjId"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDAEx.#ctor">
            <summary>
            构造函数
            (AutoGCLib.DALExCode4CSharp:Gen_DAEx_ClassConstructor1)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxRolesV2DAEx">
            <summary>
            角色V2(QxRolesV2)
            (AutoGCLib.DALExCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DAEx.#ctor">
            <summary>
            构造函数
            (AutoGCLib.DALExCode4CSharp:Gen_DAEx_ClassConstructor1)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUserGroupRelationDAEx">
            <summary>
            用户/组关系(QxUserGroupRelation)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUserGroupsDAEx">
            <summary>
            用户组(QxUserGroups)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUserIdentityDAEx">
            <summary>
            用户权限身份表(QxUserIdentity)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUserLoginNameDAEx">
            <summary>
            用户登录名(QxUserLoginName)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUserRoleRelationDAEx">
            <summary>
            用户角色关系(QxUserRoleRelation)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUserRoleRelationV2DAEx">
            <summary>
            用户角色关系V2(QxUserRoleRelationV2)
            (AutoGCLib.DALExCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DAEx.#ctor">
            <summary>
            构造函数
            (AutoGCLib.DALExCode4CSharp:Gen_DAEx_ClassConstructor1)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUsersDAEx">
            <summary>
            用户(QxUsers)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDAEx.GetQxUsers(GeneralPlatform.Entity.clsQxUsersENEx@)">
            <summary>
            
            </summary>
            <param name="objUsers"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDAEx.GetEnterSchoolDateByUserId(System.String)">
            <summary>
            根据用户Id（UserId）获取入校年月
            </summary>
            <param name="strUserId">用户ID</param>
            <returns>入校年月</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDAEx.GetEnterSchoolYearByUserId(System.String)">
            <summary>
            根据用户Id（UserId）获取入校年
            </summary>
            <param name="strUserId">用户ID</param>
            <returns>入校年</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDAEx.GetUserNameByUserId(System.String)">
            <summary>
            根据用户Id（UserId）获取用户名
            </summary>
            <param name="strUserId">用户ID</param>
            <returns>用户名</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUserStateDAEx">
            <summary>
            用户状态(QxUserState)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUsersV2DAEx">
            <summary>
            用户V2(QxUsersV2)
            (AutoGCLib.DALExCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DAEx.#ctor">
            <summary>
            构造函数
            (AutoGCLib.DALExCode4CSharp:Gen_DAEx_ClassConstructor1)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUsers_SchoolDAEx">
            <summary>
            用户_学校(QxUsers_School)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsUserDefaValueDAEx">
            <summary>
            用户缺省值(UserDefaValue)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDAEx">
            <summary>
            v部门信息By用户数(vQxDepartmentInfoByUserNum)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxDepartmentInfoDAEx">
            <summary>
            v部门信息(vQxDepartmentInfo)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDAEx">
            <summary>
            v工程用户关系ByRole(vQxPrjUserRelationByRole)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxPrjUserRelationDAEx">
            <summary>
            v工程用户关系(vQxPrjUserRelation)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxUserLoginNameDAEx">
            <summary>
            vUserLoginName(vQxUserLoginName)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxUserRoleRelationDAEx">
            <summary>
            v用户角色关系(vQxUserRoleRelation)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDAEx">
            <summary>
            v角色By菜单数(vQxUserRolesByMenuNum)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDAEx">
            <summary>
            v角色By权限数(vQxUserRolesByPotenceNum)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDAEx">
            <summary>
            v角色By用户数(vQxUserRolesByUserNum)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxUserRolesDAEx">
            <summary>
            v角色(vQxUserRoles)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxUsersDAEx">
            <summary>
            v用户(vQxUsers)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxUsersSimDAEx">
            <summary>
            v用户Sim(vQxUsersSim)
            (AutoGCLib.DALExCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDAEx.#ctor">
            <summary>
            构造函数
            (AutoGCLib.DALExCode4CSharp:Gen_DAEx_ClassConstructor1)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxUsers_SchoolDAEx">
            <summary>
            vUsers_School(vQxUsers_School)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvSubjectRelationDAEx">
            <summary>
            v隶属关系(vSubjectRelation)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsXzClgDAEx">
            <summary>
            XzClg(XzClg)
            (AutoGCLib.DALExCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDAEx.#ctor">
            <summary>
            构造函数
            (AutoGCLib.DALExCode4CSharp:Gen_DAEx_ClassConstructor1)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsXzGradeBaseDAEx">
            <summary>
            年级(XzGradeBase)
            (AutoGCLib.DALExCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDAEx.#ctor">
            <summary>
            构造函数
            (AutoGCLib.DALExCode4CSharp:Gen_DAEx_ClassConstructor1)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxRolePotenceV2DAEx">
            <summary>
            角色权限关系V2(QxRolePotenceV2)
            (AutoGCLib.DALExCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DAEx.#ctor">
            <summary>
            构造函数
            (AutoGCLib.DALExCode4CSharp:Gen_DAEx_ClassConstructor1)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUserGroupPotenceDAEx">
            <summary>
            用户权限关系(QxUserGroupPotence)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxUserGroupPotenceDAEx">
            <summary>
            v用户权限关系(vQxUserGroupPotence)
            (AutoGCLib.AutoGC6Cs_M:A_GenDALExCode)
            </summary>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA">
            <summary>
            工程用户关系4同步(QxPrjUserRelation4Synch)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetDataTable_QxPrjUserRelation4Synch(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetQxPrjUserRelation4Synch(GeneralPlatform.Entity.clsQxPrjUserRelation4SynchEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxPrjUserRelation4SynchEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetQxPrjUserRelation4SynchOneBySP(GeneralPlatform.Entity.clsQxPrjUserRelation4SynchEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxPrjUserRelation4Synch_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxPrjUserRelation4SynchEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.AddNewRecord(GeneralPlatform.Entity.clsQxPrjUserRelation4SynchEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxPrjUserRelation4SynchEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxPrjUserRelation4SynchEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxPrjUserRelation4SynchEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxPrjUserRelation4SynchEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxPrjUserRelation4SynchEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxPrjUserRelation4SynchEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxPrjUserRelation4SynchEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxPrjUserRelation4SynchEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.AddnewQxPrjUserRelation4SynchBySP(GeneralPlatform.Entity.clsQxPrjUserRelation4SynchEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxPrjUserRelation4SynchEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.AddnewQxPrjUserRelation4Synchs(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.Update(GeneralPlatform.Entity.clsQxPrjUserRelation4SynchEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxPrjUserRelation4SynchEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.UpdateBySP(GeneralPlatform.Entity.clsQxPrjUserRelation4SynchEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.UpdateBySql2(GeneralPlatform.Entity.clsQxPrjUserRelation4SynchEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxPrjUserRelation4SynchEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxPrjUserRelation4SynchEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxPrjUserRelation4SynchEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxPrjUserRelation4SynchEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxPrjUserRelation4SynchEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.UpdateBySql2(GeneralPlatform.Entity.clsQxPrjUserRelation4SynchEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxPrjUserRelation4SynchEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.DelRecordBySP(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.DelRecord(System.Int64,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.DelQxPrjUserRelation4Synch(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.DelRecord(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.DelQxPrjUserRelation4Synch(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.DelQxPrjUserRelation4SynchWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.CopyTo(GeneralPlatform.Entity.clsQxPrjUserRelation4SynchEN,GeneralPlatform.Entity.clsQxPrjUserRelation4SynchEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxPrjUserRelation4SynchENS">源对象</param>
            <param name = "objQxPrjUserRelation4SynchENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxPrjUserRelation4SynchEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxPrjUserRelation4SynchEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxPrjUserRelation4SynchEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetUniCondStr(GeneralPlatform.Entity.clsQxPrjUserRelation4SynchEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxPrjUserRelation4Synch(工程用户关系4同步),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxPrjUserRelation4SynchEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelation4SynchDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxServer4SynchDA">
            <summary>
            同步服务器(QxServer4Synch)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxServer4SynchDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxServer4SynchDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxServer4SynchDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strServerId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strServerId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetDataTable_QxServer4Synch(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetQxServer4Synch(GeneralPlatform.Entity.clsQxServer4SynchEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxServer4SynchEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetObjByServerId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strServerId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetQxServer4SynchOneBySP(GeneralPlatform.Entity.clsQxServer4SynchEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxServer4Synch_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxServer4SynchEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strServerId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strServerId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.AddNewRecord(GeneralPlatform.Entity.clsQxServer4SynchEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxServer4SynchEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxServer4SynchEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxServer4SynchEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxServer4SynchEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxServer4SynchEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxServer4SynchEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxServer4SynchEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxServer4SynchEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.AddnewQxServer4SynchBySP(GeneralPlatform.Entity.clsQxServer4SynchEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxServer4SynchEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.AddnewQxServer4Synchs(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.Update(GeneralPlatform.Entity.clsQxServer4SynchEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxServer4SynchEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.UpdateBySP(GeneralPlatform.Entity.clsQxServer4SynchEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.UpdateBySql2(GeneralPlatform.Entity.clsQxServer4SynchEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxServer4SynchEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxServer4SynchEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxServer4SynchEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxServer4SynchEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxServer4SynchEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.UpdateBySql2(GeneralPlatform.Entity.clsQxServer4SynchEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxServer4SynchEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strServerId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strServerId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.DelQxServer4Synch(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strServerId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.DelQxServer4Synch(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.DelQxServer4SynchWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.CopyTo(GeneralPlatform.Entity.clsQxServer4SynchEN,GeneralPlatform.Entity.clsQxServer4SynchEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxServer4SynchENS">源对象</param>
            <param name = "objQxServer4SynchENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxServer4SynchEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxServer4SynchEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxServer4SynchEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetServerId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetUniCondStr(GeneralPlatform.Entity.clsQxServer4SynchEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxServer4Synch(同步服务器),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxServer4SynchEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxServer4SynchDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA">
            <summary>
            用户角色关系4同步(QxUserRoleRelation4Synch)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetDataTable_QxUserRoleRelation4Synch(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetQxUserRoleRelation4Synch(GeneralPlatform.Entity.clsQxUserRoleRelation4SynchEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxUserRoleRelation4SynchEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetQxUserRoleRelation4SynchOneBySP(GeneralPlatform.Entity.clsQxUserRoleRelation4SynchEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxUserRoleRelation4Synch_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxUserRoleRelation4SynchEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.AddNewRecord(GeneralPlatform.Entity.clsQxUserRoleRelation4SynchEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUserRoleRelation4SynchEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxUserRoleRelation4SynchEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUserRoleRelation4SynchEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxUserRoleRelation4SynchEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUserRoleRelation4SynchEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxUserRoleRelation4SynchEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUserRoleRelation4SynchEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxUserRoleRelation4SynchEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.AddnewQxUserRoleRelation4SynchBySP(GeneralPlatform.Entity.clsQxUserRoleRelation4SynchEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxUserRoleRelation4SynchEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.AddnewQxUserRoleRelation4Synchs(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.Update(GeneralPlatform.Entity.clsQxUserRoleRelation4SynchEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxUserRoleRelation4SynchEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.UpdateBySP(GeneralPlatform.Entity.clsQxUserRoleRelation4SynchEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.UpdateBySql2(GeneralPlatform.Entity.clsQxUserRoleRelation4SynchEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxUserRoleRelation4SynchEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxUserRoleRelation4SynchEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxUserRoleRelation4SynchEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxUserRoleRelation4SynchEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxUserRoleRelation4SynchEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.UpdateBySql2(GeneralPlatform.Entity.clsQxUserRoleRelation4SynchEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxUserRoleRelation4SynchEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.DelRecordBySP(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.DelRecord(System.Int64,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.DelQxUserRoleRelation4Synch(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.DelRecord(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.DelQxUserRoleRelation4Synch(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.DelQxUserRoleRelation4SynchWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.CopyTo(GeneralPlatform.Entity.clsQxUserRoleRelation4SynchEN,GeneralPlatform.Entity.clsQxUserRoleRelation4SynchEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxUserRoleRelation4SynchENS">源对象</param>
            <param name = "objQxUserRoleRelation4SynchENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxUserRoleRelation4SynchEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxUserRoleRelation4SynchEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxUserRoleRelation4SynchEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetUniCondStr(GeneralPlatform.Entity.clsQxUserRoleRelation4SynchEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxUserRoleRelation4Synch(用户角色关系4同步),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxUserRoleRelation4SynchEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelation4SynchDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUsers4SynchDA">
            <summary>
            用户4同步(QxUsers4Synch)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUsers4SynchDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUsers4SynchDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxUsers4SynchDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetDataTable_QxUsers4Synch(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetQxUsers4Synch(GeneralPlatform.Entity.clsQxUsers4SynchEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxUsers4SynchEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetQxUsers4SynchOneBySP(GeneralPlatform.Entity.clsQxUsers4SynchEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxUsers4Synch_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxUsers4SynchEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.AddNewRecord(GeneralPlatform.Entity.clsQxUsers4SynchEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUsers4SynchEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxUsers4SynchEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUsers4SynchEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxUsers4SynchEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUsers4SynchEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxUsers4SynchEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUsers4SynchEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxUsers4SynchEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.AddnewQxUsers4SynchBySP(GeneralPlatform.Entity.clsQxUsers4SynchEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxUsers4SynchEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.AddnewQxUsers4Synchs(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.Update(GeneralPlatform.Entity.clsQxUsers4SynchEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxUsers4SynchEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.UpdateBySP(GeneralPlatform.Entity.clsQxUsers4SynchEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.UpdateBySql2(GeneralPlatform.Entity.clsQxUsers4SynchEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxUsers4SynchEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxUsers4SynchEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxUsers4SynchEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxUsers4SynchEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxUsers4SynchEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.UpdateBySql2(GeneralPlatform.Entity.clsQxUsers4SynchEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxUsers4SynchEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.DelRecordBySP(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.DelRecord(System.Int64,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.DelQxUsers4Synch(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.DelRecord(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.DelQxUsers4Synch(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.DelQxUsers4SynchWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.CopyTo(GeneralPlatform.Entity.clsQxUsers4SynchEN,GeneralPlatform.Entity.clsQxUsers4SynchEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxUsers4SynchENS">源对象</param>
            <param name = "objQxUsers4SynchENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxUsers4SynchEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxUsers4SynchEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxUsers4SynchEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetUniCondStr(GeneralPlatform.Entity.clsQxUsers4SynchEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxUsers4Synch(用户4同步),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxUsers4SynchEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers4SynchDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA">
            <summary>
            v工程用户关系4同步(vQxPrjUserRelation4Synch)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetDataTable_vQxPrjUserRelation4Synch(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetvQxPrjUserRelation4Synch(GeneralPlatform.Entity.clsvQxPrjUserRelation4SynchEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxPrjUserRelation4SynchEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetvQxPrjUserRelation4SynchOneBySP(GeneralPlatform.Entity.clsvQxPrjUserRelation4SynchEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxPrjUserRelation4Synch_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxPrjUserRelation4SynchEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.CopyTo(GeneralPlatform.Entity.clsvQxPrjUserRelation4SynchEN,GeneralPlatform.Entity.clsvQxPrjUserRelation4SynchEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxPrjUserRelation4SynchENS">源对象</param>
            <param name = "objvQxPrjUserRelation4SynchENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxPrjUserRelation4SynchEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelation4SynchDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA">
            <summary>
            v用户角色关系4同步(vQxUserRoleRelation4Synch)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetDataTable_vQxUserRoleRelation4Synch(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetvQxUserRoleRelation4Synch(GeneralPlatform.Entity.clsvQxUserRoleRelation4SynchEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxUserRoleRelation4SynchEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetvQxUserRoleRelation4SynchOneBySP(GeneralPlatform.Entity.clsvQxUserRoleRelation4SynchEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxUserRoleRelation4Synch_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxUserRoleRelation4SynchEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.CopyTo(GeneralPlatform.Entity.clsvQxUserRoleRelation4SynchEN,GeneralPlatform.Entity.clsvQxUserRoleRelation4SynchEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxUserRoleRelation4SynchENS">源对象</param>
            <param name = "objvQxUserRoleRelation4SynchENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxUserRoleRelation4SynchEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelation4SynchDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxUsers4SynchDA">
            <summary>
            v用户4同步(vQxUsers4Synch)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxUsers4SynchDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxUsers4SynchDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxUsers4SynchDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetDataTable_vQxUsers4Synch(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetvQxUsers4Synch(GeneralPlatform.Entity.clsvQxUsers4SynchEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxUsers4SynchEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetvQxUsers4SynchOneBySP(GeneralPlatform.Entity.clsvQxUsers4SynchEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxUsers4Synch_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxUsers4SynchEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.CopyTo(GeneralPlatform.Entity.clsvQxUsers4SynchEN,GeneralPlatform.Entity.clsvQxUsers4SynchEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxUsers4SynchENS">源对象</param>
            <param name = "objvQxUsers4SynchENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxUsers4SynchEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers4SynchDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxViewInfoDA">
            <summary>
            界面(QxViewInfo)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxViewInfoDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxViewInfoDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxViewInfoDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strViewId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strViewId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetDataTable_QxViewInfo(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetQxViewInfo(GeneralPlatform.Entity.clsQxViewInfoEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxViewInfoEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetObjByViewId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strViewId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetQxViewInfoOneBySP(GeneralPlatform.Entity.clsQxViewInfoEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxViewInfo_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxViewInfoEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strViewId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strViewId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.AddNewRecord(GeneralPlatform.Entity.clsQxViewInfoEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxViewInfoEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxViewInfoEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxViewInfoEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxViewInfoEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxViewInfoEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxViewInfoEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.AddnewQxViewInfoBySP(GeneralPlatform.Entity.clsQxViewInfoEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxViewInfoEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.AddnewQxViewInfos(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.Update(GeneralPlatform.Entity.clsQxViewInfoEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxViewInfoEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.UpdateBySP(GeneralPlatform.Entity.clsQxViewInfoEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.UpdateBySql2(GeneralPlatform.Entity.clsQxViewInfoEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxViewInfoEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxViewInfoEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxViewInfoEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxViewInfoEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxViewInfoEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.UpdateBySql2(GeneralPlatform.Entity.clsQxViewInfoEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxViewInfoEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strViewId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strViewId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.DelQxViewInfo(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strViewId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.DelQxViewInfo(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.DelQxViewInfoWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.CopyTo(GeneralPlatform.Entity.clsQxViewInfoEN,GeneralPlatform.Entity.clsQxViewInfoEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxViewInfoENS">源对象</param>
            <param name = "objQxViewInfoENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxViewInfoEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxViewInfoEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxViewInfoEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetViewId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetUniCondStr(GeneralPlatform.Entity.clsQxViewInfoEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxViewInfo(界面),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxViewInfoEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewInfoDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxViewPotenceDA">
            <summary>
            界面权限(QxViewPotence)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxViewPotenceDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxViewPotenceDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxViewPotenceDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetDataTable_QxViewPotence(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetQxViewPotence(GeneralPlatform.Entity.clsQxViewPotenceEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxViewPotenceEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetQxViewPotenceOneBySP(GeneralPlatform.Entity.clsQxViewPotenceEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxViewPotence_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxViewPotenceEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.AddNewRecord(GeneralPlatform.Entity.clsQxViewPotenceEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxViewPotenceEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxViewPotenceEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxViewPotenceEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxViewPotenceEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxViewPotenceEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxViewPotenceEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxViewPotenceEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxViewPotenceEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.AddnewQxViewPotenceBySP(GeneralPlatform.Entity.clsQxViewPotenceEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxViewPotenceEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.AddnewQxViewPotences(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.Update(GeneralPlatform.Entity.clsQxViewPotenceEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxViewPotenceEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.UpdateBySP(GeneralPlatform.Entity.clsQxViewPotenceEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.UpdateBySql2(GeneralPlatform.Entity.clsQxViewPotenceEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxViewPotenceEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxViewPotenceEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxViewPotenceEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxViewPotenceEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxViewPotenceEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.UpdateBySql2(GeneralPlatform.Entity.clsQxViewPotenceEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxViewPotenceEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.DelRecordBySP(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.DelRecord(System.Int64,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.DelQxViewPotence(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.DelRecord(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.DelQxViewPotence(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.DelQxViewPotenceWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.CopyTo(GeneralPlatform.Entity.clsQxViewPotenceEN,GeneralPlatform.Entity.clsQxViewPotenceEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxViewPotenceENS">源对象</param>
            <param name = "objQxViewPotenceENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxViewPotenceEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxViewPotenceEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxViewPotenceEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetUniCondStr(GeneralPlatform.Entity.clsQxViewPotenceEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxViewPotence(界面权限),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxViewPotenceEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxViewPotenceDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxViewInfoDA">
            <summary>
            v界面信息(vQxViewInfo)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxViewInfoDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxViewInfoDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxViewInfoDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strViewId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strViewId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetDataTable_vQxViewInfo(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetvQxViewInfo(GeneralPlatform.Entity.clsvQxViewInfoEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxViewInfoEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetObjByViewId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strViewId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetvQxViewInfoOneBySP(GeneralPlatform.Entity.clsvQxViewInfoEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxViewInfo_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxViewInfoEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strViewId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strViewId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.CopyTo(GeneralPlatform.Entity.clsvQxViewInfoEN,GeneralPlatform.Entity.clsvQxViewInfoEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxViewInfoENS">源对象</param>
            <param name = "objvQxViewInfoENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxViewInfoEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetViewId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewInfoDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxViewPotenceDA">
            <summary>
            v界面权限(vQxViewPotence)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxViewPotenceDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxViewPotenceDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxViewPotenceDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetDataTable_vQxViewPotence(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetvQxViewPotence(GeneralPlatform.Entity.clsvQxViewPotenceEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxViewPotenceEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetvQxViewPotenceOneBySP(GeneralPlatform.Entity.clsvQxViewPotenceEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxViewPotence_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxViewPotenceEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.CopyTo(GeneralPlatform.Entity.clsvQxViewPotenceEN,GeneralPlatform.Entity.clsvQxViewPotenceEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxViewPotenceENS">源对象</param>
            <param name = "objvQxViewPotenceENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxViewPotenceEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxViewPotenceDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsErrorInformationDA">
            <summary>
            错误(ErrorInformation)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsErrorInformationDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsErrorInformationDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsErrorInformationDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetDataTable_ErrorInformation(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetErrorInformation(GeneralPlatform.Entity.clsErrorInformationEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objErrorInformationEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetObjByErrorID(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngErrorID">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetErrorInformationOneBySP(GeneralPlatform.Entity.clsErrorInformationEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程ErrorInformation_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objErrorInformationEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngErrorID">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngErrorID">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.AddNewRecord(GeneralPlatform.Entity.clsErrorInformationEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsErrorInformationEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objErrorInformationEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsErrorInformationEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objErrorInformationEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsErrorInformationEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objErrorInformationEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsErrorInformationEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objErrorInformationEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.AddnewErrorInformationBySP(GeneralPlatform.Entity.clsErrorInformationEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objErrorInformationEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.AddnewErrorInformations(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.Update(GeneralPlatform.Entity.clsErrorInformationEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objErrorInformationEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.UpdateBySP(GeneralPlatform.Entity.clsErrorInformationEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.UpdateBySql2(GeneralPlatform.Entity.clsErrorInformationEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objErrorInformationEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsErrorInformationEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objErrorInformationEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsErrorInformationEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objErrorInformationEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.UpdateBySql2(GeneralPlatform.Entity.clsErrorInformationEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objErrorInformationEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.DelRecordBySP(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "lngErrorID">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.DelRecord(System.Int64,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "lngErrorID">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.DelErrorInformation(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.DelRecord(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "lngErrorID">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.DelErrorInformation(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.DelErrorInformationWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.CopyTo(GeneralPlatform.Entity.clsErrorInformationEN,GeneralPlatform.Entity.clsErrorInformationEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objErrorInformationENS">源对象</param>
            <param name = "objErrorInformationENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.CheckPropertyNew(GeneralPlatform.Entity.clsErrorInformationEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.CheckProperty4Update(GeneralPlatform.Entity.clsErrorInformationEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.CheckProperty4Condition(GeneralPlatform.Entity.clsErrorInformationEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetUniCondStr(GeneralPlatform.Entity.clsErrorInformationEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--ErrorInformation(错误),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objErrorInformationEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsErrorInformationDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsPageDispModeDA">
            <summary>
            页面显示模式(PageDispMode)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsPageDispModeDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsPageDispModeDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsPageDispModeDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strPageDispModeId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strPageDispModeId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetDataTable_PageDispMode(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetPageDispMode(GeneralPlatform.Entity.clsPageDispModeEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objPageDispModeEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetObjByPageDispModeId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strPageDispModeId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetPageDispModeOneBySP(GeneralPlatform.Entity.clsPageDispModeEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程PageDispMode_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objPageDispModeEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strPageDispModeId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strPageDispModeId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.AddNewRecord(GeneralPlatform.Entity.clsPageDispModeEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsPageDispModeEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objPageDispModeEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsPageDispModeEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objPageDispModeEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsPageDispModeEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objPageDispModeEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsPageDispModeEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objPageDispModeEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.AddnewPageDispModeBySP(GeneralPlatform.Entity.clsPageDispModeEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objPageDispModeEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.AddnewPageDispModes(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.Update(GeneralPlatform.Entity.clsPageDispModeEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objPageDispModeEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.UpdateBySP(GeneralPlatform.Entity.clsPageDispModeEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.UpdateBySql2(GeneralPlatform.Entity.clsPageDispModeEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objPageDispModeEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsPageDispModeEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objPageDispModeEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsPageDispModeEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objPageDispModeEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.UpdateBySql2(GeneralPlatform.Entity.clsPageDispModeEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objPageDispModeEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strPageDispModeId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strPageDispModeId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.DelPageDispMode(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strPageDispModeId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.DelPageDispMode(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.DelPageDispModeWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.CopyTo(GeneralPlatform.Entity.clsPageDispModeEN,GeneralPlatform.Entity.clsPageDispModeEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objPageDispModeENS">源对象</param>
            <param name = "objPageDispModeENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.CheckPropertyNew(GeneralPlatform.Entity.clsPageDispModeEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.CheckProperty4Update(GeneralPlatform.Entity.clsPageDispModeEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.CheckProperty4Condition(GeneralPlatform.Entity.clsPageDispModeEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetPageDispModeId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsPageDispModeDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxPageDispModeDA">
            <summary>
            页面显示模式(QxPageDispMode)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxPageDispModeDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxPageDispModeDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxPageDispModeDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strPageDispModeId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strPageDispModeId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetDataTable_QxPageDispMode(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetQxPageDispMode(GeneralPlatform.Entity.clsQxPageDispModeEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxPageDispModeEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetObjByPageDispModeId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strPageDispModeId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetQxPageDispModeOneBySP(GeneralPlatform.Entity.clsQxPageDispModeEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxPageDispMode_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxPageDispModeEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strPageDispModeId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strPageDispModeId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.AddNewRecord(GeneralPlatform.Entity.clsQxPageDispModeEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxPageDispModeEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxPageDispModeEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxPageDispModeEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxPageDispModeEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxPageDispModeEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxPageDispModeEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxPageDispModeEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxPageDispModeEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.AddnewQxPageDispModeBySP(GeneralPlatform.Entity.clsQxPageDispModeEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxPageDispModeEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.AddnewQxPageDispModes(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.Update(GeneralPlatform.Entity.clsQxPageDispModeEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxPageDispModeEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.UpdateBySP(GeneralPlatform.Entity.clsQxPageDispModeEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.UpdateBySql2(GeneralPlatform.Entity.clsQxPageDispModeEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxPageDispModeEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxPageDispModeEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxPageDispModeEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxPageDispModeEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxPageDispModeEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.UpdateBySql2(GeneralPlatform.Entity.clsQxPageDispModeEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxPageDispModeEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strPageDispModeId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strPageDispModeId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.DelQxPageDispMode(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strPageDispModeId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.DelQxPageDispMode(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.DelQxPageDispModeWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.CopyTo(GeneralPlatform.Entity.clsQxPageDispModeEN,GeneralPlatform.Entity.clsQxPageDispModeEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxPageDispModeENS">源对象</param>
            <param name = "objQxPageDispModeENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxPageDispModeEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxPageDispModeEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxPageDispModeEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetPageDispModeId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetUniCondStr(GeneralPlatform.Entity.clsQxPageDispModeEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxPageDispMode(页面显示模式),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxPageDispModeEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPageDispModeDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxPrjMenusDA">
            <summary>
            工程菜单(QxPrjMenus)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxPrjMenusDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxPrjMenusDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxPrjMenusDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strMenuId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strMenuId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetDataTable_QxPrjMenus(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetQxPrjMenus(GeneralPlatform.Entity.clsQxPrjMenusEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxPrjMenusEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetObjByMenuId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strMenuId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetQxPrjMenusOneBySP(GeneralPlatform.Entity.clsQxPrjMenusEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxPrjMenus_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxPrjMenusEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strMenuId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strMenuId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.AddNewRecord(GeneralPlatform.Entity.clsQxPrjMenusEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxPrjMenusEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxPrjMenusEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxPrjMenusEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxPrjMenusEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxPrjMenusEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxPrjMenusEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.AddnewQxPrjMenusBySP(GeneralPlatform.Entity.clsQxPrjMenusEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxPrjMenusEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.AddnewQxPrjMenuss(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.Update(GeneralPlatform.Entity.clsQxPrjMenusEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxPrjMenusEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.UpdateBySP(GeneralPlatform.Entity.clsQxPrjMenusEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.UpdateBySql2(GeneralPlatform.Entity.clsQxPrjMenusEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxPrjMenusEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxPrjMenusEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxPrjMenusEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxPrjMenusEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxPrjMenusEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.UpdateBySql2(GeneralPlatform.Entity.clsQxPrjMenusEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxPrjMenusEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strMenuId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strMenuId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.DelQxPrjMenus(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strMenuId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.DelQxPrjMenus(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.DelQxPrjMenusWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.CopyTo(GeneralPlatform.Entity.clsQxPrjMenusEN,GeneralPlatform.Entity.clsQxPrjMenusEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxPrjMenusENS">源对象</param>
            <param name = "objQxPrjMenusENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxPrjMenusEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxPrjMenusEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxPrjMenusEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetMenuId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetUniCondStr(GeneralPlatform.Entity.clsQxPrjMenusEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxPrjMenus(工程菜单),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxPrjMenusEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxPrjMenuSetDA">
            <summary>
            菜单集(QxPrjMenuSet)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxPrjMenuSetDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxPrjMenuSetDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxPrjMenuSetDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strMenuSetId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strMenuSetId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetDataTable_QxPrjMenuSet(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetQxPrjMenuSet(GeneralPlatform.Entity.clsQxPrjMenuSetEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxPrjMenuSetEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetObjByMenuSetId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strMenuSetId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetQxPrjMenuSetOneBySP(GeneralPlatform.Entity.clsQxPrjMenuSetEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxPrjMenuSet_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxPrjMenuSetEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strMenuSetId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strMenuSetId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.AddNewRecord(GeneralPlatform.Entity.clsQxPrjMenuSetEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxPrjMenuSetEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxPrjMenuSetEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxPrjMenuSetEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxPrjMenuSetEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxPrjMenuSetEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxPrjMenuSetEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxPrjMenuSetEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxPrjMenuSetEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.AddnewQxPrjMenuSetBySP(GeneralPlatform.Entity.clsQxPrjMenuSetEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxPrjMenuSetEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.AddnewQxPrjMenuSets(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.Update(GeneralPlatform.Entity.clsQxPrjMenuSetEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxPrjMenuSetEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.UpdateBySP(GeneralPlatform.Entity.clsQxPrjMenuSetEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.UpdateBySql2(GeneralPlatform.Entity.clsQxPrjMenuSetEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxPrjMenuSetEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxPrjMenuSetEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxPrjMenuSetEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxPrjMenuSetEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxPrjMenuSetEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.UpdateBySql2(GeneralPlatform.Entity.clsQxPrjMenuSetEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxPrjMenuSetEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strMenuSetId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strMenuSetId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.DelQxPrjMenuSet(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strMenuSetId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.DelQxPrjMenuSet(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.DelQxPrjMenuSetWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.CopyTo(GeneralPlatform.Entity.clsQxPrjMenuSetEN,GeneralPlatform.Entity.clsQxPrjMenuSetEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxPrjMenuSetENS">源对象</param>
            <param name = "objQxPrjMenuSetENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxPrjMenuSetEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxPrjMenuSetEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxPrjMenuSetEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetMenuSetId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetUniCondStr(GeneralPlatform.Entity.clsQxPrjMenuSetEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxPrjMenuSet(菜单集),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxPrjMenuSetEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenuSetDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxPrjMenusV2DA">
            <summary>
            工程菜单V2(QxPrjMenusV2)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxPrjMenusV2DA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxPrjMenusV2DA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxPrjMenusV2DA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetDataTable_QxPrjMenusV2(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetQxPrjMenusV2(GeneralPlatform.Entity.clsQxPrjMenusV2EN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxPrjMenusV2EN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetObjByid(System.Int32)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "intid">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetQxPrjMenusV2OneBySP(GeneralPlatform.Entity.clsQxPrjMenusV2EN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxPrjMenusV2_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxPrjMenusV2EN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.IsExist(System.Int32)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "intid">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.IsExistBySP(System.Int32)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "intid">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.AddNewRecord(GeneralPlatform.Entity.clsQxPrjMenusV2EN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxPrjMenusV2EN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxPrjMenusV2EN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxPrjMenusV2EN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxPrjMenusV2EN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxPrjMenusV2EN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxPrjMenusV2EN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxPrjMenusV2EN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxPrjMenusV2EN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.AddnewQxPrjMenusV2BySP(GeneralPlatform.Entity.clsQxPrjMenusV2EN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxPrjMenusV2EN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.AddnewQxPrjMenusV2s(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.Update(GeneralPlatform.Entity.clsQxPrjMenusV2EN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxPrjMenusV2EN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.UpdateBySP(GeneralPlatform.Entity.clsQxPrjMenusV2EN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.UpdateBySql2(GeneralPlatform.Entity.clsQxPrjMenusV2EN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxPrjMenusV2EN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxPrjMenusV2EN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxPrjMenusV2EN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxPrjMenusV2EN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxPrjMenusV2EN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.UpdateBySql2(GeneralPlatform.Entity.clsQxPrjMenusV2EN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxPrjMenusV2EN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.DelRecordBySP(System.Int32)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "intid">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.DelRecord(System.Int32,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "intid">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.DelQxPrjMenusV2(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.DelRecord(System.Int32)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "intid">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.DelQxPrjMenusV2(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.DelQxPrjMenusV2WithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.CopyTo(GeneralPlatform.Entity.clsQxPrjMenusV2EN,GeneralPlatform.Entity.clsQxPrjMenusV2EN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxPrjMenusV2ENS">源对象</param>
            <param name = "objQxPrjMenusV2ENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.CheckPropertyNew(GeneralPlatform.Entity.clsQxPrjMenusV2EN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.CheckProperty4Update(GeneralPlatform.Entity.clsQxPrjMenusV2EN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxPrjMenusV2EN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.Getid">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetUniCondStr(GeneralPlatform.Entity.clsQxPrjMenusV2EN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxPrjMenusV2(工程菜单V2),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxPrjMenusV2EN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjMenusV2DA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxRoleMenusDA">
            <summary>
            角色菜单(QxRoleMenus)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxRoleMenusDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxRoleMenusDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxRoleMenusDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetDataTable_QxRoleMenus(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetQxRoleMenus(GeneralPlatform.Entity.clsQxRoleMenusEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxRoleMenusEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetQxRoleMenusOneBySP(GeneralPlatform.Entity.clsQxRoleMenusEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxRoleMenus_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxRoleMenusEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.AddNewRecord(GeneralPlatform.Entity.clsQxRoleMenusEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxRoleMenusEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxRoleMenusEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxRoleMenusEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxRoleMenusEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxRoleMenusEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxRoleMenusEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxRoleMenusEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxRoleMenusEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.AddnewQxRoleMenusBySP(GeneralPlatform.Entity.clsQxRoleMenusEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxRoleMenusEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.AddnewQxRoleMenuss(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.Update(GeneralPlatform.Entity.clsQxRoleMenusEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxRoleMenusEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.UpdateBySP(GeneralPlatform.Entity.clsQxRoleMenusEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.UpdateBySql2(GeneralPlatform.Entity.clsQxRoleMenusEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxRoleMenusEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxRoleMenusEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxRoleMenusEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxRoleMenusEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxRoleMenusEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.UpdateBySql2(GeneralPlatform.Entity.clsQxRoleMenusEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxRoleMenusEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.DelRecordBySP(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.DelRecord(System.Int64,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.DelQxRoleMenus(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.DelRecord(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.DelQxRoleMenus(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.DelQxRoleMenusWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.CopyTo(GeneralPlatform.Entity.clsQxRoleMenusEN,GeneralPlatform.Entity.clsQxRoleMenusEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxRoleMenusENS">源对象</param>
            <param name = "objQxRoleMenusENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxRoleMenusEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxRoleMenusEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxRoleMenusEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetUniCondStr(GeneralPlatform.Entity.clsQxRoleMenusEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxRoleMenus(角色菜单),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxRoleMenusEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxRoleMenusV2DA">
            <summary>
            角色菜单V2(QxRoleMenusV2)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxRoleMenusV2DA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxRoleMenusV2DA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxRoleMenusV2DA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetDataTable_QxRoleMenusV2(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetQxRoleMenusV2(GeneralPlatform.Entity.clsQxRoleMenusV2EN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxRoleMenusV2EN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetObjByKeyLst(System.Int32,System.Int32)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "intRId">表关键字</param>
            <param name = "intMeId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetQxRoleMenusV2OneBySP(GeneralPlatform.Entity.clsQxRoleMenusV2EN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxRoleMenusV2_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxRoleMenusV2EN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.IsExist(System.Int32,System.Int32)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "intRId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.IsExistBySP(System.Int32,System.Int32)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "intRId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.AddNewRecord(GeneralPlatform.Entity.clsQxRoleMenusV2EN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxRoleMenusV2EN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxRoleMenusV2EN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxRoleMenusV2EN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxRoleMenusV2EN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxRoleMenusV2EN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxRoleMenusV2EN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxRoleMenusV2EN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxRoleMenusV2EN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.AddnewQxRoleMenusV2BySP(GeneralPlatform.Entity.clsQxRoleMenusV2EN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxRoleMenusV2EN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.AddnewQxRoleMenusV2s(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.Update(GeneralPlatform.Entity.clsQxRoleMenusV2EN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxRoleMenusV2EN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.UpdateBySP(GeneralPlatform.Entity.clsQxRoleMenusV2EN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.UpdateBySql2(GeneralPlatform.Entity.clsQxRoleMenusV2EN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxRoleMenusV2EN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxRoleMenusV2EN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxRoleMenusV2EN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxRoleMenusV2EN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxRoleMenusV2EN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.UpdateBySql2(GeneralPlatform.Entity.clsQxRoleMenusV2EN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxRoleMenusV2EN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.DelRecordBySP(System.Int32,System.Int32)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "intRId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.DelRecord(System.Int32,System.Int32,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "intRId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.DelRecKeyLsts(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.DelRecord(System.Int32,System.Int32)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "intRId">给定的关键字值</param>
            <param name = "intMeId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.DelQxRoleMenusV2(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.DelQxRoleMenusV2WithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.CopyTo(GeneralPlatform.Entity.clsQxRoleMenusV2EN,GeneralPlatform.Entity.clsQxRoleMenusV2EN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxRoleMenusV2ENS">源对象</param>
            <param name = "objQxRoleMenusV2ENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.CheckPropertyNew(GeneralPlatform.Entity.clsQxRoleMenusV2EN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.CheckProperty4Update(GeneralPlatform.Entity.clsQxRoleMenusV2EN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxRoleMenusV2EN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleMenusV2DA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUserMenuDetailDA">
            <summary>
            用户菜单(QxUserMenuDetail)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUserMenuDetailDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUserMenuDetailDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxUserMenuDetailDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetDataTable_QxUserMenuDetail(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetQxUserMenuDetail(GeneralPlatform.Entity.clsQxUserMenuDetailEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxUserMenuDetailEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetQxUserMenuDetailOneBySP(GeneralPlatform.Entity.clsQxUserMenuDetailEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxUserMenuDetail_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxUserMenuDetailEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.AddNewRecord(GeneralPlatform.Entity.clsQxUserMenuDetailEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUserMenuDetailEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxUserMenuDetailEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUserMenuDetailEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxUserMenuDetailEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUserMenuDetailEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxUserMenuDetailEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUserMenuDetailEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxUserMenuDetailEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.AddnewQxUserMenuDetailBySP(GeneralPlatform.Entity.clsQxUserMenuDetailEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxUserMenuDetailEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.AddnewQxUserMenuDetails(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.Update(GeneralPlatform.Entity.clsQxUserMenuDetailEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxUserMenuDetailEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.UpdateBySP(GeneralPlatform.Entity.clsQxUserMenuDetailEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.UpdateBySql2(GeneralPlatform.Entity.clsQxUserMenuDetailEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxUserMenuDetailEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxUserMenuDetailEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxUserMenuDetailEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxUserMenuDetailEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxUserMenuDetailEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.UpdateBySql2(GeneralPlatform.Entity.clsQxUserMenuDetailEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxUserMenuDetailEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.DelRecordBySP(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.DelRecord(System.Int64,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.DelQxUserMenuDetail(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.DelRecord(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.DelQxUserMenuDetail(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.DelQxUserMenuDetailWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.CopyTo(GeneralPlatform.Entity.clsQxUserMenuDetailEN,GeneralPlatform.Entity.clsQxUserMenuDetailEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxUserMenuDetailENS">源对象</param>
            <param name = "objQxUserMenuDetailENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxUserMenuDetailEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxUserMenuDetailEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxUserMenuDetailEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetUniCondStr(GeneralPlatform.Entity.clsQxUserMenuDetailEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxUserMenuDetail(用户菜单),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxUserMenuDetailEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenuDetailDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUserMenusDA">
            <summary>
            用户菜单(QxUserMenus)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUserMenusDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUserMenusDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxUserMenusDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetDataTable_QxUserMenus(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetQxUserMenus(GeneralPlatform.Entity.clsQxUserMenusEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxUserMenusEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetQxUserMenusOneBySP(GeneralPlatform.Entity.clsQxUserMenusEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxUserMenus_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxUserMenusEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.AddNewRecord(GeneralPlatform.Entity.clsQxUserMenusEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUserMenusEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxUserMenusEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUserMenusEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxUserMenusEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUserMenusEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxUserMenusEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUserMenusEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxUserMenusEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.AddnewQxUserMenusBySP(GeneralPlatform.Entity.clsQxUserMenusEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxUserMenusEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.AddnewQxUserMenuss(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.Update(GeneralPlatform.Entity.clsQxUserMenusEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxUserMenusEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.UpdateBySP(GeneralPlatform.Entity.clsQxUserMenusEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.UpdateBySql2(GeneralPlatform.Entity.clsQxUserMenusEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxUserMenusEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxUserMenusEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxUserMenusEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxUserMenusEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxUserMenusEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.UpdateBySql2(GeneralPlatform.Entity.clsQxUserMenusEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxUserMenusEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.DelRecordBySP(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.DelRecord(System.Int64,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.DelQxUserMenus(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.DelRecord(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.DelQxUserMenus(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.DelQxUserMenusWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.CopyTo(GeneralPlatform.Entity.clsQxUserMenusEN,GeneralPlatform.Entity.clsQxUserMenusEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxUserMenusENS">源对象</param>
            <param name = "objQxUserMenusENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxUserMenusEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxUserMenusEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxUserMenusEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetUniCondStr(GeneralPlatform.Entity.clsQxUserMenusEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxUserMenus(用户菜单),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxUserMenusEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserMenusDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxPrjMenusDA">
            <summary>
            v工程菜单(vQxPrjMenus)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxPrjMenusDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxPrjMenusDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxPrjMenusDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strMenuId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strMenuId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetDataTable_vQxPrjMenus(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetvQxPrjMenus(GeneralPlatform.Entity.clsvQxPrjMenusEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxPrjMenusEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetObjByMenuId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strMenuId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetvQxPrjMenusOneBySP(GeneralPlatform.Entity.clsvQxPrjMenusEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxPrjMenus_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxPrjMenusEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strMenuId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strMenuId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.CopyTo(GeneralPlatform.Entity.clsvQxPrjMenusEN,GeneralPlatform.Entity.clsvQxPrjMenusEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxPrjMenusENS">源对象</param>
            <param name = "objvQxPrjMenusENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxPrjMenusEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetMenuId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenusDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxPrjMenuSetDA">
            <summary>
            v菜单集(vQxPrjMenuSet)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxPrjMenuSetDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strMenuSetId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strMenuSetId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetDataTable_vQxPrjMenuSet(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetvQxPrjMenuSet(GeneralPlatform.Entity.clsvQxPrjMenuSetEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxPrjMenuSetEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetObjByMenuSetId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strMenuSetId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetvQxPrjMenuSetOneBySP(GeneralPlatform.Entity.clsvQxPrjMenuSetEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxPrjMenuSet_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxPrjMenuSetEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strMenuSetId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strMenuSetId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.CopyTo(GeneralPlatform.Entity.clsvQxPrjMenuSetEN,GeneralPlatform.Entity.clsvQxPrjMenuSetEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxPrjMenuSetENS">源对象</param>
            <param name = "objvQxPrjMenuSetENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxPrjMenuSetEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetMenuSetId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenuSetDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA">
            <summary>
            v三层菜单(vQxPrjMenus_Leaf)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strMenuIdLeaf">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strMenuIdLeaf">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetDataTable_vQxPrjMenus_Leaf(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetvQxPrjMenus_Leaf(GeneralPlatform.Entity.clsvQxPrjMenus_LeafEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxPrjMenus_LeafEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetObjByMenuIdLeaf(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strMenuIdLeaf">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetvQxPrjMenus_LeafOneBySP(GeneralPlatform.Entity.clsvQxPrjMenus_LeafEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxPrjMenus_Leaf_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxPrjMenus_LeafEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strMenuIdLeaf">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strMenuIdLeaf">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.CopyTo(GeneralPlatform.Entity.clsvQxPrjMenus_LeafEN,GeneralPlatform.Entity.clsvQxPrjMenus_LeafEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxPrjMenus_LeafENS">源对象</param>
            <param name = "objvQxPrjMenus_LeafENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxPrjMenus_LeafEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetMenuIdLeaf">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_LeafDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA">
            <summary>
            v子层菜单(vQxPrjMenus_Sub)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strMenuIdSub">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strMenuIdSub">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetDataTable_vQxPrjMenus_Sub(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetvQxPrjMenus_Sub(GeneralPlatform.Entity.clsvQxPrjMenus_SubEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxPrjMenus_SubEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetObjByMenuIdSub(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strMenuIdSub">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetvQxPrjMenus_SubOneBySP(GeneralPlatform.Entity.clsvQxPrjMenus_SubEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxPrjMenus_Sub_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxPrjMenus_SubEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strMenuIdSub">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strMenuIdSub">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.CopyTo(GeneralPlatform.Entity.clsvQxPrjMenus_SubEN,GeneralPlatform.Entity.clsvQxPrjMenus_SubEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxPrjMenus_SubENS">源对象</param>
            <param name = "objvQxPrjMenus_SubENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxPrjMenus_SubEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetMenuIdSub">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_SubDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA">
            <summary>
            v顶层菜单(vQxPrjMenus_Up)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strMenuIdUp">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strMenuIdUp">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetDataTable_vQxPrjMenus_Up(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetvQxPrjMenus_Up(GeneralPlatform.Entity.clsvQxPrjMenus_UpEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxPrjMenus_UpEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetObjByMenuIdUp(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strMenuIdUp">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetvQxPrjMenus_UpOneBySP(GeneralPlatform.Entity.clsvQxPrjMenus_UpEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxPrjMenus_Up_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxPrjMenus_UpEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strMenuIdUp">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strMenuIdUp">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.CopyTo(GeneralPlatform.Entity.clsvQxPrjMenus_UpEN,GeneralPlatform.Entity.clsvQxPrjMenus_UpEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxPrjMenus_UpENS">源对象</param>
            <param name = "objvQxPrjMenus_UpENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxPrjMenus_UpEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetMenuIdUp">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjMenus_UpDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxRoleMenusDA">
            <summary>
            v角色菜单(vQxRoleMenus)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxRoleMenusDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxRoleMenusDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxRoleMenusDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetDataTable_vQxRoleMenus(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetvQxRoleMenus(GeneralPlatform.Entity.clsvQxRoleMenusEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxRoleMenusEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetvQxRoleMenusOneBySP(GeneralPlatform.Entity.clsvQxRoleMenusEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxRoleMenus_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxRoleMenusEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.CopyTo(GeneralPlatform.Entity.clsvQxRoleMenusEN,GeneralPlatform.Entity.clsvQxRoleMenusEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxRoleMenusENS">源对象</param>
            <param name = "objvQxRoleMenusENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxRoleMenusEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenusDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA">
            <summary>
            v角色菜单_Sim(vQxRoleMenus_Sim)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetDataTable_vQxRoleMenus_Sim(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetvQxRoleMenus_Sim(GeneralPlatform.Entity.clsvQxRoleMenus_SimEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxRoleMenus_SimEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetvQxRoleMenus_SimOneBySP(GeneralPlatform.Entity.clsvQxRoleMenus_SimEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxRoleMenus_Sim_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxRoleMenus_SimEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.CopyTo(GeneralPlatform.Entity.clsvQxRoleMenus_SimEN,GeneralPlatform.Entity.clsvQxRoleMenus_SimEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxRoleMenus_SimENS">源对象</param>
            <param name = "objvQxRoleMenus_SimENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxRoleMenus_SimEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRoleMenus_SimDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxPotenceTypeDA">
            <summary>
            权限类型(QxPotenceType)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxPotenceTypeDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxPotenceTypeDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxPotenceTypeDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strPotenceTypeId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strPotenceTypeId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetDataTable_QxPotenceType(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetQxPotenceType(GeneralPlatform.Entity.clsQxPotenceTypeEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxPotenceTypeEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetObjByPotenceTypeId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strPotenceTypeId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetQxPotenceTypeOneBySP(GeneralPlatform.Entity.clsQxPotenceTypeEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxPotenceType_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxPotenceTypeEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strPotenceTypeId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strPotenceTypeId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.AddNewRecord(GeneralPlatform.Entity.clsQxPotenceTypeEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxPotenceTypeEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxPotenceTypeEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxPotenceTypeEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxPotenceTypeEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxPotenceTypeEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxPotenceTypeEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.AddnewQxPotenceTypeBySP(GeneralPlatform.Entity.clsQxPotenceTypeEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxPotenceTypeEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.AddnewQxPotenceTypes(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.Update(GeneralPlatform.Entity.clsQxPotenceTypeEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxPotenceTypeEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.UpdateBySP(GeneralPlatform.Entity.clsQxPotenceTypeEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.UpdateBySql2(GeneralPlatform.Entity.clsQxPotenceTypeEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxPotenceTypeEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxPotenceTypeEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxPotenceTypeEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxPotenceTypeEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxPotenceTypeEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.UpdateBySql2(GeneralPlatform.Entity.clsQxPotenceTypeEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxPotenceTypeEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strPotenceTypeId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strPotenceTypeId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.DelQxPotenceType(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strPotenceTypeId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.DelQxPotenceType(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.DelQxPotenceTypeWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.CopyTo(GeneralPlatform.Entity.clsQxPotenceTypeEN,GeneralPlatform.Entity.clsQxPotenceTypeEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxPotenceTypeENS">源对象</param>
            <param name = "objQxPotenceTypeENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxPotenceTypeEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxPotenceTypeEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxPotenceTypeEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetPotenceTypeId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetUniCondStr(GeneralPlatform.Entity.clsQxPotenceTypeEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxPotenceType(权限类型),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxPotenceTypeEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPotenceTypeDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxPrjPotenceDA">
            <summary>
            工程权限(QxPrjPotence)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxPrjPotenceDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxPrjPotenceDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxPrjPotenceDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strPotenceId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strPotenceId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetDataTable_QxPrjPotence(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetQxPrjPotence(GeneralPlatform.Entity.clsQxPrjPotenceEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxPrjPotenceEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetObjByPotenceId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strPotenceId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetQxPrjPotenceOneBySP(GeneralPlatform.Entity.clsQxPrjPotenceEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxPrjPotence_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxPrjPotenceEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strPotenceId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strPotenceId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.AddNewRecord(GeneralPlatform.Entity.clsQxPrjPotenceEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxPrjPotenceEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxPrjPotenceEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxPrjPotenceEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxPrjPotenceEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxPrjPotenceEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxPrjPotenceEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.AddnewQxPrjPotenceBySP(GeneralPlatform.Entity.clsQxPrjPotenceEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxPrjPotenceEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.AddnewQxPrjPotences(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.Update(GeneralPlatform.Entity.clsQxPrjPotenceEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxPrjPotenceEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.UpdateBySP(GeneralPlatform.Entity.clsQxPrjPotenceEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.UpdateBySql2(GeneralPlatform.Entity.clsQxPrjPotenceEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxPrjPotenceEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxPrjPotenceEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxPrjPotenceEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxPrjPotenceEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxPrjPotenceEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.UpdateBySql2(GeneralPlatform.Entity.clsQxPrjPotenceEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxPrjPotenceEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strPotenceId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strPotenceId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.DelQxPrjPotence(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strPotenceId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.DelQxPrjPotence(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.DelQxPrjPotenceWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.CopyTo(GeneralPlatform.Entity.clsQxPrjPotenceEN,GeneralPlatform.Entity.clsQxPrjPotenceEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxPrjPotenceENS">源对象</param>
            <param name = "objQxPrjPotenceENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxPrjPotenceEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxPrjPotenceEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxPrjPotenceEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetPotenceId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetUniCondStr(GeneralPlatform.Entity.clsQxPrjPotenceEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxPrjPotence(工程权限),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxPrjPotenceEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxPrjPotenceV2DA">
            <summary>
            工程权限V2(QxPrjPotenceV2)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxPrjPotenceV2DA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetDataTable_QxPrjPotenceV2(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetQxPrjPotenceV2(GeneralPlatform.Entity.clsQxPrjPotenceV2EN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxPrjPotenceV2EN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetObjByPId(System.Int32)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "intPId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetQxPrjPotenceV2OneBySP(GeneralPlatform.Entity.clsQxPrjPotenceV2EN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxPrjPotenceV2_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxPrjPotenceV2EN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.IsExist(System.Int32)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "intPId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.IsExistBySP(System.Int32)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "intPId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.AddNewRecord(GeneralPlatform.Entity.clsQxPrjPotenceV2EN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxPrjPotenceV2EN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxPrjPotenceV2EN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxPrjPotenceV2EN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxPrjPotenceV2EN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxPrjPotenceV2EN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxPrjPotenceV2EN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxPrjPotenceV2EN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxPrjPotenceV2EN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.AddnewQxPrjPotenceV2BySP(GeneralPlatform.Entity.clsQxPrjPotenceV2EN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxPrjPotenceV2EN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.AddnewQxPrjPotenceV2s(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.Update(GeneralPlatform.Entity.clsQxPrjPotenceV2EN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxPrjPotenceV2EN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.UpdateBySP(GeneralPlatform.Entity.clsQxPrjPotenceV2EN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.UpdateBySql2(GeneralPlatform.Entity.clsQxPrjPotenceV2EN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxPrjPotenceV2EN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxPrjPotenceV2EN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxPrjPotenceV2EN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxPrjPotenceV2EN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxPrjPotenceV2EN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.UpdateBySql2(GeneralPlatform.Entity.clsQxPrjPotenceV2EN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxPrjPotenceV2EN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.DelRecordBySP(System.Int32)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "intPId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.DelRecord(System.Int32,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "intPId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.DelQxPrjPotenceV2(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.DelRecord(System.Int32)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "intPId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.DelQxPrjPotenceV2(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.DelQxPrjPotenceV2WithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.CopyTo(GeneralPlatform.Entity.clsQxPrjPotenceV2EN,GeneralPlatform.Entity.clsQxPrjPotenceV2EN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxPrjPotenceV2ENS">源对象</param>
            <param name = "objQxPrjPotenceV2ENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.CheckPropertyNew(GeneralPlatform.Entity.clsQxPrjPotenceV2EN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.CheckProperty4Update(GeneralPlatform.Entity.clsQxPrjPotenceV2EN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxPrjPotenceV2EN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetPId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetUniCondStr(GeneralPlatform.Entity.clsQxPrjPotenceV2EN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxPrjPotenceV2(工程权限V2),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxPrjPotenceV2EN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjPotenceV2DA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA">
            <summary>
            权限编程标志关系(QxRelaOfPotenceAndSymbol)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetDataTable_QxRelaOfPotenceAndSymbol(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetQxRelaOfPotenceAndSymbol(GeneralPlatform.Entity.clsQxRelaOfPotenceAndSymbolEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxRelaOfPotenceAndSymbolEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetObjByRelaMid(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngRelaMid">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetQxRelaOfPotenceAndSymbolOneBySP(GeneralPlatform.Entity.clsQxRelaOfPotenceAndSymbolEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxRelaOfPotenceAndSymbol_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxRelaOfPotenceAndSymbolEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngRelaMid">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngRelaMid">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.AddNewRecord(GeneralPlatform.Entity.clsQxRelaOfPotenceAndSymbolEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxRelaOfPotenceAndSymbolEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxRelaOfPotenceAndSymbolEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxRelaOfPotenceAndSymbolEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxRelaOfPotenceAndSymbolEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxRelaOfPotenceAndSymbolEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxRelaOfPotenceAndSymbolEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxRelaOfPotenceAndSymbolEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxRelaOfPotenceAndSymbolEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.AddnewQxRelaOfPotenceAndSymbolBySP(GeneralPlatform.Entity.clsQxRelaOfPotenceAndSymbolEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxRelaOfPotenceAndSymbolEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.AddnewQxRelaOfPotenceAndSymbols(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.Update(GeneralPlatform.Entity.clsQxRelaOfPotenceAndSymbolEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxRelaOfPotenceAndSymbolEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.UpdateBySP(GeneralPlatform.Entity.clsQxRelaOfPotenceAndSymbolEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.UpdateBySql2(GeneralPlatform.Entity.clsQxRelaOfPotenceAndSymbolEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxRelaOfPotenceAndSymbolEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxRelaOfPotenceAndSymbolEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxRelaOfPotenceAndSymbolEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxRelaOfPotenceAndSymbolEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxRelaOfPotenceAndSymbolEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.UpdateBySql2(GeneralPlatform.Entity.clsQxRelaOfPotenceAndSymbolEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxRelaOfPotenceAndSymbolEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.DelRecordBySP(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "lngRelaMid">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.DelRecord(System.Int64,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "lngRelaMid">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.DelQxRelaOfPotenceAndSymbol(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.DelRecord(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "lngRelaMid">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.DelQxRelaOfPotenceAndSymbol(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.DelQxRelaOfPotenceAndSymbolWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.CopyTo(GeneralPlatform.Entity.clsQxRelaOfPotenceAndSymbolEN,GeneralPlatform.Entity.clsQxRelaOfPotenceAndSymbolEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxRelaOfPotenceAndSymbolENS">源对象</param>
            <param name = "objQxRelaOfPotenceAndSymbolENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxRelaOfPotenceAndSymbolEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxRelaOfPotenceAndSymbolEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxRelaOfPotenceAndSymbolEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetUniCondStr(GeneralPlatform.Entity.clsQxRelaOfPotenceAndSymbolEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxRelaOfPotenceAndSymbol(权限编程标志关系),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxRelaOfPotenceAndSymbolEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRelaOfPotenceAndSymbolDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxRolePotenceRelaDA">
            <summary>
            角色权限关系(QxRolePotenceRela)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxRolePotenceRelaDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strRoleId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strRoleId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetDataTable_QxRolePotenceRela(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetQxRolePotenceRela(GeneralPlatform.Entity.clsQxRolePotenceRelaEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxRolePotenceRelaEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetObjByKeyLst(System.String,System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strRoleId">表关键字</param>
            <param name = "strPotenceId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetQxRolePotenceRelaOneBySP(GeneralPlatform.Entity.clsQxRolePotenceRelaEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxRolePotenceRela_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxRolePotenceRelaEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.IsExist(System.String,System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strRoleId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.IsExistBySP(System.String,System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strRoleId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.AddNewRecord(GeneralPlatform.Entity.clsQxRolePotenceRelaEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxRolePotenceRelaEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxRolePotenceRelaEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxRolePotenceRelaEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxRolePotenceRelaEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxRolePotenceRelaEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxRolePotenceRelaEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxRolePotenceRelaEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxRolePotenceRelaEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.AddnewQxRolePotenceRelaBySP(GeneralPlatform.Entity.clsQxRolePotenceRelaEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxRolePotenceRelaEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.AddnewQxRolePotenceRelas(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.Update(GeneralPlatform.Entity.clsQxRolePotenceRelaEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxRolePotenceRelaEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.UpdateBySP(GeneralPlatform.Entity.clsQxRolePotenceRelaEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.UpdateBySql2(GeneralPlatform.Entity.clsQxRolePotenceRelaEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxRolePotenceRelaEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxRolePotenceRelaEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxRolePotenceRelaEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxRolePotenceRelaEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxRolePotenceRelaEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.UpdateBySql2(GeneralPlatform.Entity.clsQxRolePotenceRelaEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxRolePotenceRelaEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.DelRecordBySP(System.String,System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strRoleId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.DelRecord(System.String,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strRoleId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.DelRecKeyLsts(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.DelRecord(System.String,System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strRoleId">给定的关键字值</param>
            <param name = "strPotenceId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.DelQxRolePotenceRela(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.DelQxRolePotenceRelaWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.CopyTo(GeneralPlatform.Entity.clsQxRolePotenceRelaEN,GeneralPlatform.Entity.clsQxRolePotenceRelaEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxRolePotenceRelaENS">源对象</param>
            <param name = "objQxRolePotenceRelaENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxRolePotenceRelaEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxRolePotenceRelaEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxRolePotenceRelaEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceRelaDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA">
            <summary>
            vPotenceSymbolForRole(vQxPotenceSymbolForRole)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetDataTable_vQxPotenceSymbolForRole(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetvQxPotenceSymbolForRole(GeneralPlatform.Entity.clsvQxPotenceSymbolForRoleEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxPotenceSymbolForRoleEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetvQxPotenceSymbolForRoleOneBySP(GeneralPlatform.Entity.clsvQxPotenceSymbolForRoleEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxPotenceSymbolForRole_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxPotenceSymbolForRoleEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.CopyTo(GeneralPlatform.Entity.clsvQxPotenceSymbolForRoleEN,GeneralPlatform.Entity.clsvQxPotenceSymbolForRoleEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxPotenceSymbolForRoleENS">源对象</param>
            <param name = "objvQxPotenceSymbolForRoleENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxPotenceSymbolForRoleEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceSymbolForRoleDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxPotenceTypeDA">
            <summary>
            v权限类型(vQxPotenceType)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxPotenceTypeDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxPotenceTypeDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxPotenceTypeDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strPotenceTypeId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strPotenceTypeId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetDataTable_vQxPotenceType(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetvQxPotenceType(GeneralPlatform.Entity.clsvQxPotenceTypeEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxPotenceTypeEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetObjByPotenceTypeId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strPotenceTypeId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetvQxPotenceTypeOneBySP(GeneralPlatform.Entity.clsvQxPotenceTypeEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxPotenceType_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxPotenceTypeEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strPotenceTypeId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strPotenceTypeId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.CopyTo(GeneralPlatform.Entity.clsvQxPotenceTypeEN,GeneralPlatform.Entity.clsvQxPotenceTypeEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxPotenceTypeENS">源对象</param>
            <param name = "objvQxPotenceTypeENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxPotenceTypeEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetPotenceTypeId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPotenceTypeDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxPrjPotenceDA">
            <summary>
            v工程权限(vQxPrjPotence)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxPrjPotenceDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxPrjPotenceDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxPrjPotenceDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strPotenceId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strPotenceId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetDataTable_vQxPrjPotence(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetvQxPrjPotence(GeneralPlatform.Entity.clsvQxPrjPotenceEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxPrjPotenceEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetObjByPotenceId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strPotenceId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetvQxPrjPotenceOneBySP(GeneralPlatform.Entity.clsvQxPrjPotenceEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxPrjPotence_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxPrjPotenceEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strPotenceId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strPotenceId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.CopyTo(GeneralPlatform.Entity.clsvQxPrjPotenceEN,GeneralPlatform.Entity.clsvQxPrjPotenceEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxPrjPotenceENS">源对象</param>
            <param name = "objvQxPrjPotenceENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxPrjPotenceEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetPotenceId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjPotenceDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA">
            <summary>
            v权限编程标志关系(vQxRelaOfPotenceAndSymbol)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetDataTable_vQxRelaOfPotenceAndSymbol(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetvQxRelaOfPotenceAndSymbol(GeneralPlatform.Entity.clsvQxRelaOfPotenceAndSymbolEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxRelaOfPotenceAndSymbolEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetObjByRelaMid(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngRelaMid">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetvQxRelaOfPotenceAndSymbolOneBySP(GeneralPlatform.Entity.clsvQxRelaOfPotenceAndSymbolEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxRelaOfPotenceAndSymbol_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxRelaOfPotenceAndSymbolEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngRelaMid">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngRelaMid">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.CopyTo(GeneralPlatform.Entity.clsvQxRelaOfPotenceAndSymbolEN,GeneralPlatform.Entity.clsvQxRelaOfPotenceAndSymbolEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxRelaOfPotenceAndSymbolENS">源对象</param>
            <param name = "objvQxRelaOfPotenceAndSymbolENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxRelaOfPotenceAndSymbolEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxRelaOfPotenceAndSymbolDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxCodeTypeDA">
            <summary>
            代码类型(QxCodeType)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxCodeTypeDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxCodeTypeDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxCodeTypeDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strQxCodeTypeId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strQxCodeTypeId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetDataTable_QxCodeType(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetQxCodeType(GeneralPlatform.Entity.clsQxCodeTypeEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxCodeTypeEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetObjByQxCodeTypeId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strQxCodeTypeId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetQxCodeTypeOneBySP(GeneralPlatform.Entity.clsQxCodeTypeEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxCodeType_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxCodeTypeEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strQxCodeTypeId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strQxCodeTypeId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.AddNewRecord(GeneralPlatform.Entity.clsQxCodeTypeEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxCodeTypeEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxCodeTypeEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxCodeTypeEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxCodeTypeEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxCodeTypeEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxCodeTypeEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxCodeTypeEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxCodeTypeEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.AddnewQxCodeTypeBySP(GeneralPlatform.Entity.clsQxCodeTypeEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxCodeTypeEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.AddnewQxCodeTypes(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.Update(GeneralPlatform.Entity.clsQxCodeTypeEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxCodeTypeEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.UpdateBySP(GeneralPlatform.Entity.clsQxCodeTypeEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.UpdateBySql2(GeneralPlatform.Entity.clsQxCodeTypeEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxCodeTypeEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxCodeTypeEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxCodeTypeEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxCodeTypeEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxCodeTypeEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.UpdateBySql2(GeneralPlatform.Entity.clsQxCodeTypeEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxCodeTypeEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strQxCodeTypeId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strQxCodeTypeId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.DelQxCodeType(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strQxCodeTypeId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.DelQxCodeType(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.DelQxCodeTypeWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.CopyTo(GeneralPlatform.Entity.clsQxCodeTypeEN,GeneralPlatform.Entity.clsQxCodeTypeEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxCodeTypeENS">源对象</param>
            <param name = "objQxCodeTypeENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxCodeTypeEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxCodeTypeEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxCodeTypeEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetQxCodeTypeId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetUniCondStr(GeneralPlatform.Entity.clsQxCodeTypeEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxCodeType(代码类型),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxCodeTypeEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxCodeTypeDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxPrjFileRelaDA">
            <summary>
            项目相关文件(QxPrjFileRela)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxPrjFileRelaDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxPrjFileRelaDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxPrjFileRelaDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetDataTable_QxPrjFileRela(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetQxPrjFileRela(GeneralPlatform.Entity.clsQxPrjFileRelaEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxPrjFileRelaEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetQxPrjFileRelaOneBySP(GeneralPlatform.Entity.clsQxPrjFileRelaEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxPrjFileRela_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxPrjFileRelaEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.AddNewRecord(GeneralPlatform.Entity.clsQxPrjFileRelaEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxPrjFileRelaEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxPrjFileRelaEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxPrjFileRelaEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxPrjFileRelaEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxPrjFileRelaEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxPrjFileRelaEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxPrjFileRelaEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxPrjFileRelaEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.AddnewQxPrjFileRelaBySP(GeneralPlatform.Entity.clsQxPrjFileRelaEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxPrjFileRelaEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.AddnewQxPrjFileRelas(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.Update(GeneralPlatform.Entity.clsQxPrjFileRelaEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxPrjFileRelaEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.UpdateBySP(GeneralPlatform.Entity.clsQxPrjFileRelaEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.UpdateBySql2(GeneralPlatform.Entity.clsQxPrjFileRelaEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxPrjFileRelaEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxPrjFileRelaEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxPrjFileRelaEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxPrjFileRelaEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxPrjFileRelaEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.UpdateBySql2(GeneralPlatform.Entity.clsQxPrjFileRelaEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxPrjFileRelaEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.DelRecordBySP(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.DelRecord(System.Int64,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.DelQxPrjFileRela(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.DelRecord(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.DelQxPrjFileRela(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.DelQxPrjFileRelaWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.CopyTo(GeneralPlatform.Entity.clsQxPrjFileRelaEN,GeneralPlatform.Entity.clsQxPrjFileRelaEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxPrjFileRelaENS">源对象</param>
            <param name = "objQxPrjFileRelaENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxPrjFileRelaEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxPrjFileRelaEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxPrjFileRelaEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetUniCondStr(GeneralPlatform.Entity.clsQxPrjFileRelaEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxPrjFileRela(项目相关文件),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxPrjFileRelaEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjFileRelaDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA">
            <summary>
            文件下载站点(QxPrjSite4DownLoad)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strPrjSiteId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strPrjSiteId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetDataTable_QxPrjSite4DownLoad(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetQxPrjSite4DownLoad(GeneralPlatform.Entity.clsQxPrjSite4DownLoadEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxPrjSite4DownLoadEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetObjByPrjSiteId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strPrjSiteId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetQxPrjSite4DownLoadOneBySP(GeneralPlatform.Entity.clsQxPrjSite4DownLoadEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxPrjSite4DownLoad_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxPrjSite4DownLoadEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strPrjSiteId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strPrjSiteId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.AddNewRecord(GeneralPlatform.Entity.clsQxPrjSite4DownLoadEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxPrjSite4DownLoadEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxPrjSite4DownLoadEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxPrjSite4DownLoadEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxPrjSite4DownLoadEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxPrjSite4DownLoadEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxPrjSite4DownLoadEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxPrjSite4DownLoadEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxPrjSite4DownLoadEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.AddnewQxPrjSite4DownLoadBySP(GeneralPlatform.Entity.clsQxPrjSite4DownLoadEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxPrjSite4DownLoadEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.AddnewQxPrjSite4DownLoads(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.Update(GeneralPlatform.Entity.clsQxPrjSite4DownLoadEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxPrjSite4DownLoadEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.UpdateBySP(GeneralPlatform.Entity.clsQxPrjSite4DownLoadEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.UpdateBySql2(GeneralPlatform.Entity.clsQxPrjSite4DownLoadEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxPrjSite4DownLoadEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxPrjSite4DownLoadEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxPrjSite4DownLoadEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxPrjSite4DownLoadEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxPrjSite4DownLoadEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.UpdateBySql2(GeneralPlatform.Entity.clsQxPrjSite4DownLoadEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxPrjSite4DownLoadEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strPrjSiteId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strPrjSiteId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.DelQxPrjSite4DownLoad(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strPrjSiteId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.DelQxPrjSite4DownLoad(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.DelQxPrjSite4DownLoadWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.CopyTo(GeneralPlatform.Entity.clsQxPrjSite4DownLoadEN,GeneralPlatform.Entity.clsQxPrjSite4DownLoadEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxPrjSite4DownLoadENS">源对象</param>
            <param name = "objQxPrjSite4DownLoadENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxPrjSite4DownLoadEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxPrjSite4DownLoadEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxPrjSite4DownLoadEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetPrjSiteId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetUniCondStr(GeneralPlatform.Entity.clsQxPrjSite4DownLoadEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxPrjSite4DownLoad(文件下载站点),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxPrjSite4DownLoadEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjSite4DownLoadDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA">
            <summary>
            用户下载日志细节(QxUserDownLoadDetailLog)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetDataTable_QxUserDownLoadDetailLog(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetQxUserDownLoadDetailLog(GeneralPlatform.Entity.clsQxUserDownLoadDetailLogEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxUserDownLoadDetailLogEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetQxUserDownLoadDetailLogOneBySP(GeneralPlatform.Entity.clsQxUserDownLoadDetailLogEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxUserDownLoadDetailLog_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxUserDownLoadDetailLogEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.AddNewRecord(GeneralPlatform.Entity.clsQxUserDownLoadDetailLogEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUserDownLoadDetailLogEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxUserDownLoadDetailLogEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUserDownLoadDetailLogEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxUserDownLoadDetailLogEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUserDownLoadDetailLogEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxUserDownLoadDetailLogEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUserDownLoadDetailLogEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxUserDownLoadDetailLogEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.AddnewQxUserDownLoadDetailLogBySP(GeneralPlatform.Entity.clsQxUserDownLoadDetailLogEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxUserDownLoadDetailLogEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.AddnewQxUserDownLoadDetailLogs(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.Update(GeneralPlatform.Entity.clsQxUserDownLoadDetailLogEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxUserDownLoadDetailLogEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.UpdateBySP(GeneralPlatform.Entity.clsQxUserDownLoadDetailLogEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.UpdateBySql2(GeneralPlatform.Entity.clsQxUserDownLoadDetailLogEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxUserDownLoadDetailLogEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxUserDownLoadDetailLogEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxUserDownLoadDetailLogEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxUserDownLoadDetailLogEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxUserDownLoadDetailLogEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.UpdateBySql2(GeneralPlatform.Entity.clsQxUserDownLoadDetailLogEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxUserDownLoadDetailLogEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.DelRecordBySP(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.DelRecord(System.Int64,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.DelQxUserDownLoadDetailLog(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.DelRecord(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.DelQxUserDownLoadDetailLog(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.DelQxUserDownLoadDetailLogWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.CopyTo(GeneralPlatform.Entity.clsQxUserDownLoadDetailLogEN,GeneralPlatform.Entity.clsQxUserDownLoadDetailLogEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxUserDownLoadDetailLogENS">源对象</param>
            <param name = "objQxUserDownLoadDetailLogENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxUserDownLoadDetailLogEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxUserDownLoadDetailLogEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxUserDownLoadDetailLogEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetUniCondStr(GeneralPlatform.Entity.clsQxUserDownLoadDetailLogEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxUserDownLoadDetailLog(用户下载日志细节),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxUserDownLoadDetailLogEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadDetailLogDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUserDownLoadLogDA">
            <summary>
            用户下载日志(QxUserDownLoadLog)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxUserDownLoadLogDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strUserDownLoadLogId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strUserDownLoadLogId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetDataTable_QxUserDownLoadLog(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetQxUserDownLoadLog(GeneralPlatform.Entity.clsQxUserDownLoadLogEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxUserDownLoadLogEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetObjByUserDownLoadLogId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strUserDownLoadLogId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetQxUserDownLoadLogOneBySP(GeneralPlatform.Entity.clsQxUserDownLoadLogEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxUserDownLoadLog_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxUserDownLoadLogEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strUserDownLoadLogId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strUserDownLoadLogId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.AddNewRecord(GeneralPlatform.Entity.clsQxUserDownLoadLogEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUserDownLoadLogEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxUserDownLoadLogEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUserDownLoadLogEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxUserDownLoadLogEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUserDownLoadLogEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxUserDownLoadLogEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUserDownLoadLogEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxUserDownLoadLogEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.AddnewQxUserDownLoadLogBySP(GeneralPlatform.Entity.clsQxUserDownLoadLogEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxUserDownLoadLogEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.AddnewQxUserDownLoadLogs(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.Update(GeneralPlatform.Entity.clsQxUserDownLoadLogEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxUserDownLoadLogEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.UpdateBySP(GeneralPlatform.Entity.clsQxUserDownLoadLogEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.UpdateBySql2(GeneralPlatform.Entity.clsQxUserDownLoadLogEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxUserDownLoadLogEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxUserDownLoadLogEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxUserDownLoadLogEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxUserDownLoadLogEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxUserDownLoadLogEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.UpdateBySql2(GeneralPlatform.Entity.clsQxUserDownLoadLogEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxUserDownLoadLogEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strUserDownLoadLogId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strUserDownLoadLogId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.DelQxUserDownLoadLog(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strUserDownLoadLogId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.DelQxUserDownLoadLog(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.DelQxUserDownLoadLogWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.CopyTo(GeneralPlatform.Entity.clsQxUserDownLoadLogEN,GeneralPlatform.Entity.clsQxUserDownLoadLogEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxUserDownLoadLogENS">源对象</param>
            <param name = "objQxUserDownLoadLogENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxUserDownLoadLogEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxUserDownLoadLogEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxUserDownLoadLogEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetUniCondStr(GeneralPlatform.Entity.clsQxUserDownLoadLogEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxUserDownLoadLog(用户下载日志),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxUserDownLoadLogEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserDownLoadLogDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxPrjFileRelaDA">
            <summary>
            v项目相关文件(vQxPrjFileRela)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxPrjFileRelaDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetDataTable_vQxPrjFileRela(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetvQxPrjFileRela(GeneralPlatform.Entity.clsvQxPrjFileRelaEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxPrjFileRelaEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetvQxPrjFileRelaOneBySP(GeneralPlatform.Entity.clsvQxPrjFileRelaEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxPrjFileRela_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxPrjFileRelaEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.CopyTo(GeneralPlatform.Entity.clsvQxPrjFileRelaEN,GeneralPlatform.Entity.clsvQxPrjFileRelaEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxPrjFileRelaENS">源对象</param>
            <param name = "objvQxPrjFileRelaENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxPrjFileRelaEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjFileRelaDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA">
            <summary>
            v文件下载站点(vQxPrjSite4DownLoad)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strPrjSiteId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strPrjSiteId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetDataTable_vQxPrjSite4DownLoad(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetvQxPrjSite4DownLoad(GeneralPlatform.Entity.clsvQxPrjSite4DownLoadEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxPrjSite4DownLoadEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetObjByPrjSiteId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strPrjSiteId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetvQxPrjSite4DownLoadOneBySP(GeneralPlatform.Entity.clsvQxPrjSite4DownLoadEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxPrjSite4DownLoad_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxPrjSite4DownLoadEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strPrjSiteId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strPrjSiteId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.CopyTo(GeneralPlatform.Entity.clsvQxPrjSite4DownLoadEN,GeneralPlatform.Entity.clsvQxPrjSite4DownLoadEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxPrjSite4DownLoadENS">源对象</param>
            <param name = "objvQxPrjSite4DownLoadENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxPrjSite4DownLoadEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjSite4DownLoadDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA">
            <summary>
            v用户下载日志细节(vQxUserDownLoadDetailLog)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetDataTable_vQxUserDownLoadDetailLog(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetvQxUserDownLoadDetailLog(GeneralPlatform.Entity.clsvQxUserDownLoadDetailLogEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxUserDownLoadDetailLogEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetvQxUserDownLoadDetailLogOneBySP(GeneralPlatform.Entity.clsvQxUserDownLoadDetailLogEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxUserDownLoadDetailLog_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxUserDownLoadDetailLogEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.CopyTo(GeneralPlatform.Entity.clsvQxUserDownLoadDetailLogEN,GeneralPlatform.Entity.clsvQxUserDownLoadDetailLogEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxUserDownLoadDetailLogENS">源对象</param>
            <param name = "objvQxUserDownLoadDetailLogENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxUserDownLoadDetailLogEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadDetailLogDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA">
            <summary>
            v用户下载日志(vQxUserDownLoadLog)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strUserDownLoadLogId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strUserDownLoadLogId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetDataTable_vQxUserDownLoadLog(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetvQxUserDownLoadLog(GeneralPlatform.Entity.clsvQxUserDownLoadLogEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxUserDownLoadLogEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetObjByUserDownLoadLogId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strUserDownLoadLogId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetvQxUserDownLoadLogOneBySP(GeneralPlatform.Entity.clsvQxUserDownLoadLogEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxUserDownLoadLog_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxUserDownLoadLogEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strUserDownLoadLogId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strUserDownLoadLogId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.CopyTo(GeneralPlatform.Entity.clsvQxUserDownLoadLogEN,GeneralPlatform.Entity.clsvQxUserDownLoadLogEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxUserDownLoadLogENS">源对象</param>
            <param name = "objvQxUserDownLoadLogENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxUserDownLoadLogEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserDownLoadLogDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsDataBaseTypeDA">
            <summary>
            数据库类型(DataBaseType)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsDataBaseTypeDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsDataBaseTypeDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsDataBaseTypeDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strDataBaseTypeId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strDataBaseTypeId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetDataTable_DataBaseType(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetDataBaseType(GeneralPlatform.Entity.clsDataBaseTypeEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objDataBaseTypeEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetObjByDataBaseTypeId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strDataBaseTypeId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetDataBaseTypeOneBySP(GeneralPlatform.Entity.clsDataBaseTypeEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程DataBaseType_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objDataBaseTypeEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strDataBaseTypeId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strDataBaseTypeId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.AddNewRecord(GeneralPlatform.Entity.clsDataBaseTypeEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsDataBaseTypeEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objDataBaseTypeEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsDataBaseTypeEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objDataBaseTypeEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsDataBaseTypeEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objDataBaseTypeEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsDataBaseTypeEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objDataBaseTypeEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.AddnewDataBaseTypeBySP(GeneralPlatform.Entity.clsDataBaseTypeEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objDataBaseTypeEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.AddnewDataBaseTypes(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.Update(GeneralPlatform.Entity.clsDataBaseTypeEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objDataBaseTypeEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.UpdateBySP(GeneralPlatform.Entity.clsDataBaseTypeEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.UpdateBySql2(GeneralPlatform.Entity.clsDataBaseTypeEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objDataBaseTypeEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsDataBaseTypeEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objDataBaseTypeEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsDataBaseTypeEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objDataBaseTypeEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.UpdateBySql2(GeneralPlatform.Entity.clsDataBaseTypeEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objDataBaseTypeEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strDataBaseTypeId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strDataBaseTypeId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.DelDataBaseType(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strDataBaseTypeId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.DelDataBaseType(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.DelDataBaseTypeWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.CopyTo(GeneralPlatform.Entity.clsDataBaseTypeEN,GeneralPlatform.Entity.clsDataBaseTypeEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objDataBaseTypeENS">源对象</param>
            <param name = "objDataBaseTypeENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.CheckPropertyNew(GeneralPlatform.Entity.clsDataBaseTypeEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.CheckProperty4Update(GeneralPlatform.Entity.clsDataBaseTypeEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.CheckProperty4Condition(GeneralPlatform.Entity.clsDataBaseTypeEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetDataBaseTypeId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsDataBaseTypeDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxFuncModuleDA">
            <summary>
            功能模块(QxFuncModule)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxFuncModuleDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxFuncModuleDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxFuncModuleDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strFuncModuleId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strFuncModuleId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetDataTable_QxFuncModule(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetQxFuncModule(GeneralPlatform.Entity.clsQxFuncModuleEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxFuncModuleEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetObjByFuncModuleId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strFuncModuleId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetQxFuncModuleOneBySP(GeneralPlatform.Entity.clsQxFuncModuleEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxFuncModule_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxFuncModuleEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strFuncModuleId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strFuncModuleId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.AddNewRecord(GeneralPlatform.Entity.clsQxFuncModuleEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxFuncModuleEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxFuncModuleEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxFuncModuleEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxFuncModuleEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxFuncModuleEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxFuncModuleEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxFuncModuleEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxFuncModuleEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.AddnewQxFuncModuleBySP(GeneralPlatform.Entity.clsQxFuncModuleEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxFuncModuleEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.AddnewQxFuncModules(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.Update(GeneralPlatform.Entity.clsQxFuncModuleEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxFuncModuleEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.UpdateBySP(GeneralPlatform.Entity.clsQxFuncModuleEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.UpdateBySql2(GeneralPlatform.Entity.clsQxFuncModuleEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxFuncModuleEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxFuncModuleEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxFuncModuleEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxFuncModuleEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxFuncModuleEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.UpdateBySql2(GeneralPlatform.Entity.clsQxFuncModuleEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxFuncModuleEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strFuncModuleId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strFuncModuleId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.DelQxFuncModule(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strFuncModuleId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.DelQxFuncModule(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.DelQxFuncModuleWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.CopyTo(GeneralPlatform.Entity.clsQxFuncModuleEN,GeneralPlatform.Entity.clsQxFuncModuleEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxFuncModuleENS">源对象</param>
            <param name = "objQxFuncModuleENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxFuncModuleEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxFuncModuleEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxFuncModuleEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetFuncModuleId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModuleDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxFuncModule_AgcDA">
            <summary>
            功能模块_Agc(QxFuncModule_Agc)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxFuncModule_AgcDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strFuncModuleAgcId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strFuncModuleAgcId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetDataTable_QxFuncModule_Agc(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetQxFuncModule_Agc(GeneralPlatform.Entity.clsQxFuncModule_AgcEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxFuncModule_AgcEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetObjByFuncModuleAgcId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strFuncModuleAgcId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetQxFuncModule_AgcOneBySP(GeneralPlatform.Entity.clsQxFuncModule_AgcEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxFuncModule_Agc_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxFuncModule_AgcEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strFuncModuleAgcId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strFuncModuleAgcId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.AddNewRecord(GeneralPlatform.Entity.clsQxFuncModule_AgcEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxFuncModule_AgcEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxFuncModule_AgcEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxFuncModule_AgcEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxFuncModule_AgcEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxFuncModule_AgcEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxFuncModule_AgcEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxFuncModule_AgcEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxFuncModule_AgcEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.AddnewQxFuncModule_AgcBySP(GeneralPlatform.Entity.clsQxFuncModule_AgcEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxFuncModule_AgcEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.AddnewQxFuncModule_Agcs(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.Update(GeneralPlatform.Entity.clsQxFuncModule_AgcEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxFuncModule_AgcEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.UpdateBySP(GeneralPlatform.Entity.clsQxFuncModule_AgcEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.UpdateBySql2(GeneralPlatform.Entity.clsQxFuncModule_AgcEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxFuncModule_AgcEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxFuncModule_AgcEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxFuncModule_AgcEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxFuncModule_AgcEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxFuncModule_AgcEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.UpdateBySql2(GeneralPlatform.Entity.clsQxFuncModule_AgcEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxFuncModule_AgcEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strFuncModuleAgcId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strFuncModuleAgcId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.DelQxFuncModule_Agc(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strFuncModuleAgcId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.DelQxFuncModule_Agc(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.DelQxFuncModule_AgcWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.CopyTo(GeneralPlatform.Entity.clsQxFuncModule_AgcEN,GeneralPlatform.Entity.clsQxFuncModule_AgcEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxFuncModule_AgcENS">源对象</param>
            <param name = "objQxFuncModule_AgcENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxFuncModule_AgcEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxFuncModule_AgcEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxFuncModule_AgcEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetFuncModuleAgcId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxFuncModule_AgcDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxPrjDataBaseDA">
            <summary>
            数据库对象(QxPrjDataBase)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxPrjDataBaseDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxPrjDataBaseDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxPrjDataBaseDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strQxPrjDataBaseId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strQxPrjDataBaseId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetDataTable_QxPrjDataBase(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetQxPrjDataBase(GeneralPlatform.Entity.clsQxPrjDataBaseEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxPrjDataBaseEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetObjByQxPrjDataBaseId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strQxPrjDataBaseId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetQxPrjDataBaseOneBySP(GeneralPlatform.Entity.clsQxPrjDataBaseEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxPrjDataBase_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxPrjDataBaseEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strQxPrjDataBaseId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strQxPrjDataBaseId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.AddNewRecord(GeneralPlatform.Entity.clsQxPrjDataBaseEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxPrjDataBaseEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxPrjDataBaseEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxPrjDataBaseEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxPrjDataBaseEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxPrjDataBaseEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxPrjDataBaseEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxPrjDataBaseEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxPrjDataBaseEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.AddnewQxPrjDataBaseBySP(GeneralPlatform.Entity.clsQxPrjDataBaseEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxPrjDataBaseEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.AddnewQxPrjDataBases(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.Update(GeneralPlatform.Entity.clsQxPrjDataBaseEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxPrjDataBaseEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.UpdateBySP(GeneralPlatform.Entity.clsQxPrjDataBaseEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.UpdateBySql2(GeneralPlatform.Entity.clsQxPrjDataBaseEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxPrjDataBaseEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxPrjDataBaseEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxPrjDataBaseEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxPrjDataBaseEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxPrjDataBaseEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.UpdateBySql2(GeneralPlatform.Entity.clsQxPrjDataBaseEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxPrjDataBaseEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strQxPrjDataBaseId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strQxPrjDataBaseId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.DelQxPrjDataBase(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strQxPrjDataBaseId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.DelQxPrjDataBase(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.DelQxPrjDataBaseWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.CopyTo(GeneralPlatform.Entity.clsQxPrjDataBaseEN,GeneralPlatform.Entity.clsQxPrjDataBaseEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxPrjDataBaseENS">源对象</param>
            <param name = "objQxPrjDataBaseENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxPrjDataBaseEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxPrjDataBaseEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxPrjDataBaseEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetQxPrjDataBaseId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetUniCondStr(GeneralPlatform.Entity.clsQxPrjDataBaseEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxPrjDataBase(数据库对象),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxPrjDataBaseEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjDataBaseDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxPrjModuleDA">
            <summary>
            项目模块(QxPrjModule)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxPrjModuleDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxPrjModuleDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxPrjModuleDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strModuleId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strModuleId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetDataTable_QxPrjModule(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetQxPrjModule(GeneralPlatform.Entity.clsQxPrjModuleEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxPrjModuleEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetObjByModuleId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strModuleId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetQxPrjModuleOneBySP(GeneralPlatform.Entity.clsQxPrjModuleEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxPrjModule_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxPrjModuleEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strModuleId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strModuleId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.AddNewRecord(GeneralPlatform.Entity.clsQxPrjModuleEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxPrjModuleEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxPrjModuleEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxPrjModuleEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxPrjModuleEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxPrjModuleEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxPrjModuleEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.AddnewQxPrjModuleBySP(GeneralPlatform.Entity.clsQxPrjModuleEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxPrjModuleEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.AddnewQxPrjModules(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.Update(GeneralPlatform.Entity.clsQxPrjModuleEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxPrjModuleEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.UpdateBySP(GeneralPlatform.Entity.clsQxPrjModuleEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.UpdateBySql2(GeneralPlatform.Entity.clsQxPrjModuleEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxPrjModuleEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxPrjModuleEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxPrjModuleEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxPrjModuleEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxPrjModuleEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.UpdateBySql2(GeneralPlatform.Entity.clsQxPrjModuleEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxPrjModuleEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strModuleId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strModuleId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.DelQxPrjModule(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strModuleId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.DelQxPrjModule(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.DelQxPrjModuleWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.CopyTo(GeneralPlatform.Entity.clsQxPrjModuleEN,GeneralPlatform.Entity.clsQxPrjModuleEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxPrjModuleENS">源对象</param>
            <param name = "objQxPrjModuleENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxPrjModuleEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxPrjModuleEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxPrjModuleEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetModuleId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetUniCondStr(GeneralPlatform.Entity.clsQxPrjModuleEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxPrjModule(项目模块),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxPrjModuleEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjModuleDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxProjectsDA">
            <summary>
            工程(QxProjects)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxProjectsDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxProjectsDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxProjectsDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strQxPrjId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strQxPrjId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetDataTable_QxProjects(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetQxProjects(GeneralPlatform.Entity.clsQxProjectsEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxProjectsEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetObjByQxPrjId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strQxPrjId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetQxProjectsOneBySP(GeneralPlatform.Entity.clsQxProjectsEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxProjects_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxProjectsEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strQxPrjId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strQxPrjId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.AddNewRecord(GeneralPlatform.Entity.clsQxProjectsEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxProjectsEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxProjectsEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxProjectsEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxProjectsEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxProjectsEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxProjectsEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxProjectsEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxProjectsEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.AddnewQxProjectsBySP(GeneralPlatform.Entity.clsQxProjectsEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxProjectsEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.AddnewQxProjectss(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.Update(GeneralPlatform.Entity.clsQxProjectsEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxProjectsEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.UpdateBySP(GeneralPlatform.Entity.clsQxProjectsEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.UpdateBySql2(GeneralPlatform.Entity.clsQxProjectsEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxProjectsEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxProjectsEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxProjectsEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxProjectsEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxProjectsEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.UpdateBySql2(GeneralPlatform.Entity.clsQxProjectsEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxProjectsEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strQxPrjId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strQxPrjId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.DelQxProjects(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strQxPrjId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.DelQxProjects(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.DelQxProjectsWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.CopyTo(GeneralPlatform.Entity.clsQxProjectsEN,GeneralPlatform.Entity.clsQxProjectsEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxProjectsENS">源对象</param>
            <param name = "objQxProjectsENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxProjectsEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxProjectsEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxProjectsEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetQxPrjId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetUniCondStr(GeneralPlatform.Entity.clsQxProjectsEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxProjects(工程),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxProjectsEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxProjectsDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxFuncModuleDA">
            <summary>
            v功能模块(vQxFuncModule)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxFuncModuleDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxFuncModuleDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxFuncModuleDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strFuncModuleId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strFuncModuleId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetDataTable_vQxFuncModule(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetvQxFuncModule(GeneralPlatform.Entity.clsvQxFuncModuleEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxFuncModuleEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetObjByFuncModuleId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strFuncModuleId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetvQxFuncModuleOneBySP(GeneralPlatform.Entity.clsvQxFuncModuleEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxFuncModule_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxFuncModuleEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strFuncModuleId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strFuncModuleId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.CopyTo(GeneralPlatform.Entity.clsvQxFuncModuleEN,GeneralPlatform.Entity.clsvQxFuncModuleEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxFuncModuleENS">源对象</param>
            <param name = "objvQxFuncModuleENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxFuncModuleEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetFuncModuleId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModuleDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA">
            <summary>
            v功能模块_Agc(vQxFuncModule_Agc)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strFuncModuleAgcId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strFuncModuleAgcId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetDataTable_vQxFuncModule_Agc(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetvQxFuncModule_Agc(GeneralPlatform.Entity.clsvQxFuncModule_AgcEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxFuncModule_AgcEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetObjByFuncModuleAgcId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strFuncModuleAgcId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetvQxFuncModule_AgcOneBySP(GeneralPlatform.Entity.clsvQxFuncModule_AgcEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxFuncModule_Agc_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxFuncModule_AgcEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strFuncModuleAgcId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strFuncModuleAgcId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.CopyTo(GeneralPlatform.Entity.clsvQxFuncModule_AgcEN,GeneralPlatform.Entity.clsvQxFuncModule_AgcEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxFuncModule_AgcENS">源对象</param>
            <param name = "objvQxFuncModule_AgcENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxFuncModule_AgcEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxFuncModule_AgcDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxPrjDataBaseDA">
            <summary>
            v数据库对象(vQxPrjDataBase)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxPrjDataBaseDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strQxPrjDataBaseId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strQxPrjDataBaseId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetDataTable_vQxPrjDataBase(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetvQxPrjDataBase(GeneralPlatform.Entity.clsvQxPrjDataBaseEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxPrjDataBaseEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetObjByQxPrjDataBaseId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strQxPrjDataBaseId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetvQxPrjDataBaseOneBySP(GeneralPlatform.Entity.clsvQxPrjDataBaseEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxPrjDataBase_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxPrjDataBaseEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strQxPrjDataBaseId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strQxPrjDataBaseId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.CopyTo(GeneralPlatform.Entity.clsvQxPrjDataBaseEN,GeneralPlatform.Entity.clsvQxPrjDataBaseEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxPrjDataBaseENS">源对象</param>
            <param name = "objvQxPrjDataBaseENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxPrjDataBaseEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetQxPrjDataBaseId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjDataBaseDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxPrjModuleDA">
            <summary>
            v项目模块(vQxPrjModule)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxPrjModuleDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxPrjModuleDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxPrjModuleDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strModuleId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strModuleId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetDataTable_vQxPrjModule(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetvQxPrjModule(GeneralPlatform.Entity.clsvQxPrjModuleEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxPrjModuleEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetObjByModuleId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strModuleId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetvQxPrjModuleOneBySP(GeneralPlatform.Entity.clsvQxPrjModuleEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxPrjModule_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxPrjModuleEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strModuleId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strModuleId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.CopyTo(GeneralPlatform.Entity.clsvQxPrjModuleEN,GeneralPlatform.Entity.clsvQxPrjModuleEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxPrjModuleENS">源对象</param>
            <param name = "objvQxPrjModuleENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxPrjModuleEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetModuleId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjModuleDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsFuncModuleDA">
            <summary>
            功能模块(FuncModule)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsFuncModuleDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsFuncModuleDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsFuncModuleDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strFuncModuleId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strFuncModuleId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetDataTable_FuncModule(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetFuncModule(GeneralPlatform.Entity.clsFuncModuleEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objFuncModuleEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetObjByFuncModuleId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strFuncModuleId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetFuncModuleOneBySP(GeneralPlatform.Entity.clsFuncModuleEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程FuncModule_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objFuncModuleEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strFuncModuleId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strFuncModuleId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.AddNewRecord(GeneralPlatform.Entity.clsFuncModuleEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsFuncModuleEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objFuncModuleEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsFuncModuleEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objFuncModuleEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsFuncModuleEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objFuncModuleEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsFuncModuleEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objFuncModuleEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.AddnewFuncModuleBySP(GeneralPlatform.Entity.clsFuncModuleEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objFuncModuleEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.AddnewFuncModules(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.Update(GeneralPlatform.Entity.clsFuncModuleEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objFuncModuleEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.UpdateBySP(GeneralPlatform.Entity.clsFuncModuleEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.UpdateBySql2(GeneralPlatform.Entity.clsFuncModuleEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objFuncModuleEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsFuncModuleEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objFuncModuleEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsFuncModuleEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objFuncModuleEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.UpdateBySql2(GeneralPlatform.Entity.clsFuncModuleEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objFuncModuleEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strFuncModuleId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strFuncModuleId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.DelFuncModule(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strFuncModuleId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.DelFuncModule(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.DelFuncModuleWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.CopyTo(GeneralPlatform.Entity.clsFuncModuleEN,GeneralPlatform.Entity.clsFuncModuleEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objFuncModuleENS">源对象</param>
            <param name = "objFuncModuleENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.CheckPropertyNew(GeneralPlatform.Entity.clsFuncModuleEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.CheckProperty4Update(GeneralPlatform.Entity.clsFuncModuleEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.CheckProperty4Condition(GeneralPlatform.Entity.clsFuncModuleEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetFuncModuleId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsFuncModuleDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvFuncModuleDA">
            <summary>
            v功能模块(vFuncModule)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvFuncModuleDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvFuncModuleDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvFuncModuleDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strFuncModuleId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strFuncModuleId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetDataTable_vFuncModule(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetvFuncModule(GeneralPlatform.Entity.clsvFuncModuleEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvFuncModuleEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetObjByFuncModuleId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strFuncModuleId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetvFuncModuleOneBySP(GeneralPlatform.Entity.clsvFuncModuleEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vFuncModule_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvFuncModuleEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strFuncModuleId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strFuncModuleId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.CopyTo(GeneralPlatform.Entity.clsvFuncModuleEN,GeneralPlatform.Entity.clsvFuncModuleEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvFuncModuleENS">源对象</param>
            <param name = "objvFuncModuleENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvFuncModuleEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetFuncModuleId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvFuncModuleDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxApplicationTypeDA">
            <summary>
            应用程序类型(QxApplicationType)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxApplicationTypeDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxApplicationTypeDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxApplicationTypeDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetDataTable_QxApplicationType(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetQxApplicationType(GeneralPlatform.Entity.clsQxApplicationTypeEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxApplicationTypeEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetObjByApplicationTypeId(System.Int32)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "intApplicationTypeId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetQxApplicationTypeOneBySP(GeneralPlatform.Entity.clsQxApplicationTypeEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxApplicationType_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxApplicationTypeEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.IsExist(System.Int32)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "intApplicationTypeId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.IsExistBySP(System.Int32)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "intApplicationTypeId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.AddNewRecord(GeneralPlatform.Entity.clsQxApplicationTypeEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxApplicationTypeEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxApplicationTypeEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxApplicationTypeEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxApplicationTypeEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxApplicationTypeEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxApplicationTypeEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxApplicationTypeEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxApplicationTypeEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.AddnewQxApplicationTypeBySP(GeneralPlatform.Entity.clsQxApplicationTypeEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxApplicationTypeEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.AddnewQxApplicationTypes(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.Update(GeneralPlatform.Entity.clsQxApplicationTypeEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxApplicationTypeEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.UpdateBySP(GeneralPlatform.Entity.clsQxApplicationTypeEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.UpdateBySql2(GeneralPlatform.Entity.clsQxApplicationTypeEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxApplicationTypeEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxApplicationTypeEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxApplicationTypeEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxApplicationTypeEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxApplicationTypeEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.UpdateBySql2(GeneralPlatform.Entity.clsQxApplicationTypeEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxApplicationTypeEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.DelRecordBySP(System.Int32)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "intApplicationTypeId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.DelRecord(System.Int32,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "intApplicationTypeId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.DelQxApplicationType(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.DelRecord(System.Int32)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "intApplicationTypeId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.DelQxApplicationType(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.DelQxApplicationTypeWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.CopyTo(GeneralPlatform.Entity.clsQxApplicationTypeEN,GeneralPlatform.Entity.clsQxApplicationTypeEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxApplicationTypeENS">源对象</param>
            <param name = "objQxApplicationTypeENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxApplicationTypeEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxApplicationTypeEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxApplicationTypeEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetApplicationTypeId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetUniCondStr(GeneralPlatform.Entity.clsQxApplicationTypeEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxApplicationType(应用程序类型),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxApplicationTypeEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxApplicationTypeDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxDepartmentTypeDA">
            <summary>
            部门类型(QxDepartmentType)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxDepartmentTypeDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxDepartmentTypeDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxDepartmentTypeDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strDepartmentTypeId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strDepartmentTypeId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetDataTable_QxDepartmentType(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetQxDepartmentType(GeneralPlatform.Entity.clsQxDepartmentTypeEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxDepartmentTypeEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetObjByDepartmentTypeId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strDepartmentTypeId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetQxDepartmentTypeOneBySP(GeneralPlatform.Entity.clsQxDepartmentTypeEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxDepartmentType_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxDepartmentTypeEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strDepartmentTypeId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strDepartmentTypeId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.AddNewRecord(GeneralPlatform.Entity.clsQxDepartmentTypeEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxDepartmentTypeEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxDepartmentTypeEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxDepartmentTypeEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxDepartmentTypeEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxDepartmentTypeEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxDepartmentTypeEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxDepartmentTypeEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxDepartmentTypeEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.AddnewQxDepartmentTypeBySP(GeneralPlatform.Entity.clsQxDepartmentTypeEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxDepartmentTypeEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.AddnewQxDepartmentTypes(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.Update(GeneralPlatform.Entity.clsQxDepartmentTypeEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxDepartmentTypeEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.UpdateBySP(GeneralPlatform.Entity.clsQxDepartmentTypeEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.UpdateBySql2(GeneralPlatform.Entity.clsQxDepartmentTypeEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxDepartmentTypeEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxDepartmentTypeEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxDepartmentTypeEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxDepartmentTypeEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxDepartmentTypeEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.UpdateBySql2(GeneralPlatform.Entity.clsQxDepartmentTypeEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxDepartmentTypeEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strDepartmentTypeId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strDepartmentTypeId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.DelQxDepartmentType(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strDepartmentTypeId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.DelQxDepartmentType(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.DelQxDepartmentTypeWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.CopyTo(GeneralPlatform.Entity.clsQxDepartmentTypeEN,GeneralPlatform.Entity.clsQxDepartmentTypeEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxDepartmentTypeENS">源对象</param>
            <param name = "objQxDepartmentTypeENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxDepartmentTypeEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxDepartmentTypeEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxDepartmentTypeEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetDepartmentTypeId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentTypeDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsSubjectTypeDA">
            <summary>
            学科类型(SubjectType)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsSubjectTypeDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsSubjectTypeDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsSubjectTypeDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strSubjectTypeId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strSubjectTypeId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetDataTable_SubjectType(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetSubjectType(GeneralPlatform.Entity.clsSubjectTypeEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objSubjectTypeEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetObjBySubjectTypeId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strSubjectTypeId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetSubjectTypeOneBySP(GeneralPlatform.Entity.clsSubjectTypeEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程SubjectType_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objSubjectTypeEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strSubjectTypeId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strSubjectTypeId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.AddNewRecord(GeneralPlatform.Entity.clsSubjectTypeEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsSubjectTypeEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objSubjectTypeEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsSubjectTypeEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objSubjectTypeEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsSubjectTypeEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objSubjectTypeEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsSubjectTypeEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objSubjectTypeEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.AddnewSubjectTypeBySP(GeneralPlatform.Entity.clsSubjectTypeEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objSubjectTypeEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.AddnewSubjectTypes(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.Update(GeneralPlatform.Entity.clsSubjectTypeEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objSubjectTypeEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.UpdateBySP(GeneralPlatform.Entity.clsSubjectTypeEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.UpdateBySql2(GeneralPlatform.Entity.clsSubjectTypeEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objSubjectTypeEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsSubjectTypeEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objSubjectTypeEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsSubjectTypeEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objSubjectTypeEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.UpdateBySql2(GeneralPlatform.Entity.clsSubjectTypeEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objSubjectTypeEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strSubjectTypeId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strSubjectTypeId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.DelSubjectType(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strSubjectTypeId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.DelSubjectType(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.DelSubjectTypeWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.CopyTo(GeneralPlatform.Entity.clsSubjectTypeEN,GeneralPlatform.Entity.clsSubjectTypeEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objSubjectTypeENS">源对象</param>
            <param name = "objSubjectTypeENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.CheckPropertyNew(GeneralPlatform.Entity.clsSubjectTypeEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.CheckProperty4Update(GeneralPlatform.Entity.clsSubjectTypeEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.CheckProperty4Condition(GeneralPlatform.Entity.clsSubjectTypeEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetSubjectTypeId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectTypeDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsTSysParaDA">
            <summary>
            系统参数(TSysPara)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsTSysParaDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsTSysParaDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsTSysParaDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetDataTable_TSysPara(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetTSysPara(GeneralPlatform.Entity.clsTSysParaEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objTSysParaEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetTSysParaOneBySP(GeneralPlatform.Entity.clsTSysParaEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程TSysPara_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objTSysParaEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.AddNewRecord(GeneralPlatform.Entity.clsTSysParaEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsTSysParaEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objTSysParaEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsTSysParaEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objTSysParaEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsTSysParaEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objTSysParaEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsTSysParaEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objTSysParaEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.AddnewTSysParaBySP(GeneralPlatform.Entity.clsTSysParaEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objTSysParaEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.AddnewTSysParas(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.Update(GeneralPlatform.Entity.clsTSysParaEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objTSysParaEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.UpdateBySP(GeneralPlatform.Entity.clsTSysParaEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.UpdateBySql2(GeneralPlatform.Entity.clsTSysParaEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objTSysParaEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsTSysParaEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objTSysParaEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsTSysParaEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objTSysParaEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.UpdateBySql2(GeneralPlatform.Entity.clsTSysParaEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objTSysParaEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.DelRecordBySP(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.DelRecord(System.Int64,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.DelTSysPara(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.DelRecord(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.DelTSysPara(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.DelTSysParaWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.CopyTo(GeneralPlatform.Entity.clsTSysParaEN,GeneralPlatform.Entity.clsTSysParaEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objTSysParaENS">源对象</param>
            <param name = "objTSysParaENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.CheckPropertyNew(GeneralPlatform.Entity.clsTSysParaEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.CheckProperty4Update(GeneralPlatform.Entity.clsTSysParaEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.CheckProperty4Condition(GeneralPlatform.Entity.clsTSysParaEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetUniCondStr(GeneralPlatform.Entity.clsTSysParaEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--TSysPara(系统参数),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objTSysParaEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTSysParaDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsExportExcel4UsersDA">
            <summary>
            导出Excel用户字段(ExportExcel4Users)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsExportExcel4UsersDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsExportExcel4UsersDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsExportExcel4UsersDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetDataTable_ExportExcel4Users(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetExportExcel4Users(GeneralPlatform.Entity.clsExportExcel4UsersEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objExportExcel4UsersEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetExportExcel4UsersOneBySP(GeneralPlatform.Entity.clsExportExcel4UsersEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程ExportExcel4Users_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objExportExcel4UsersEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.AddNewRecord(GeneralPlatform.Entity.clsExportExcel4UsersEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsExportExcel4UsersEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objExportExcel4UsersEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsExportExcel4UsersEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objExportExcel4UsersEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsExportExcel4UsersEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objExportExcel4UsersEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsExportExcel4UsersEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objExportExcel4UsersEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.AddnewExportExcel4UsersBySP(GeneralPlatform.Entity.clsExportExcel4UsersEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objExportExcel4UsersEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.AddnewExportExcel4Userss(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.Update(GeneralPlatform.Entity.clsExportExcel4UsersEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objExportExcel4UsersEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.UpdateBySP(GeneralPlatform.Entity.clsExportExcel4UsersEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.UpdateBySql2(GeneralPlatform.Entity.clsExportExcel4UsersEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objExportExcel4UsersEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsExportExcel4UsersEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objExportExcel4UsersEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsExportExcel4UsersEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objExportExcel4UsersEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.UpdateBySql2(GeneralPlatform.Entity.clsExportExcel4UsersEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objExportExcel4UsersEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.DelRecordBySP(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.DelRecord(System.Int64,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.DelExportExcel4Users(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.DelRecord(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.DelExportExcel4Users(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.DelExportExcel4UsersWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.CopyTo(GeneralPlatform.Entity.clsExportExcel4UsersEN,GeneralPlatform.Entity.clsExportExcel4UsersEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objExportExcel4UsersENS">源对象</param>
            <param name = "objExportExcel4UsersENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.CheckPropertyNew(GeneralPlatform.Entity.clsExportExcel4UsersEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.CheckProperty4Update(GeneralPlatform.Entity.clsExportExcel4UsersEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.CheckProperty4Condition(GeneralPlatform.Entity.clsExportExcel4UsersEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetUniCondStr(GeneralPlatform.Entity.clsExportExcel4UsersEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--ExportExcel4Users(导出Excel用户字段),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objExportExcel4UsersEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcel4UsersDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsExportExcelSetDA">
            <summary>
            导出Excel设置(ExportExcelSet)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsExportExcelSetDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsExportExcelSetDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsExportExcelSetDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strIdExportExcel4Users">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strIdExportExcel4Users">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetDataTable_ExportExcelSet(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetExportExcelSet(GeneralPlatform.Entity.clsExportExcelSetEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objExportExcelSetEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetObjByIdExportExcel4Users(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strIdExportExcel4Users">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetExportExcelSetOneBySP(GeneralPlatform.Entity.clsExportExcelSetEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程ExportExcelSet_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objExportExcelSetEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strIdExportExcel4Users">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strIdExportExcel4Users">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.AddNewRecord(GeneralPlatform.Entity.clsExportExcelSetEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsExportExcelSetEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objExportExcelSetEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsExportExcelSetEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objExportExcelSetEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsExportExcelSetEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objExportExcelSetEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsExportExcelSetEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objExportExcelSetEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.AddnewExportExcelSetBySP(GeneralPlatform.Entity.clsExportExcelSetEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objExportExcelSetEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.AddnewExportExcelSets(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.Update(GeneralPlatform.Entity.clsExportExcelSetEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objExportExcelSetEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.UpdateBySP(GeneralPlatform.Entity.clsExportExcelSetEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.UpdateBySql2(GeneralPlatform.Entity.clsExportExcelSetEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objExportExcelSetEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsExportExcelSetEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objExportExcelSetEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsExportExcelSetEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objExportExcelSetEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.UpdateBySql2(GeneralPlatform.Entity.clsExportExcelSetEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objExportExcelSetEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strIdExportExcel4Users">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strIdExportExcel4Users">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.DelExportExcelSet(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strIdExportExcel4Users">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.DelExportExcelSet(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.DelExportExcelSetWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.CopyTo(GeneralPlatform.Entity.clsExportExcelSetEN,GeneralPlatform.Entity.clsExportExcelSetEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objExportExcelSetENS">源对象</param>
            <param name = "objExportExcelSetENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.CheckPropertyNew(GeneralPlatform.Entity.clsExportExcelSetEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.CheckProperty4Update(GeneralPlatform.Entity.clsExportExcelSetEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.CheckProperty4Condition(GeneralPlatform.Entity.clsExportExcelSetEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetUniCondStr(GeneralPlatform.Entity.clsExportExcelSetEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--ExportExcelSet(导出Excel设置),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objExportExcelSetEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsExportExcelSetDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUserCodePathDA">
            <summary>
            用户生成路径(QxUserCodePath)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUserCodePathDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUserCodePathDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxUserCodePathDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetDataTable_QxUserCodePath(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetQxUserCodePath(GeneralPlatform.Entity.clsQxUserCodePathEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxUserCodePathEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetQxUserCodePathOneBySP(GeneralPlatform.Entity.clsQxUserCodePathEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxUserCodePath_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxUserCodePathEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.AddNewRecord(GeneralPlatform.Entity.clsQxUserCodePathEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUserCodePathEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxUserCodePathEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUserCodePathEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxUserCodePathEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUserCodePathEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxUserCodePathEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUserCodePathEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxUserCodePathEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.AddnewQxUserCodePathBySP(GeneralPlatform.Entity.clsQxUserCodePathEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxUserCodePathEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.AddnewQxUserCodePaths(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.Update(GeneralPlatform.Entity.clsQxUserCodePathEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxUserCodePathEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.UpdateBySP(GeneralPlatform.Entity.clsQxUserCodePathEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.UpdateBySql2(GeneralPlatform.Entity.clsQxUserCodePathEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxUserCodePathEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxUserCodePathEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxUserCodePathEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxUserCodePathEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxUserCodePathEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.UpdateBySql2(GeneralPlatform.Entity.clsQxUserCodePathEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxUserCodePathEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.DelRecordBySP(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.DelRecord(System.Int64,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.DelQxUserCodePath(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.DelRecord(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.DelQxUserCodePath(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.DelQxUserCodePathWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.CopyTo(GeneralPlatform.Entity.clsQxUserCodePathEN,GeneralPlatform.Entity.clsQxUserCodePathEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxUserCodePathENS">源对象</param>
            <param name = "objQxUserCodePathENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxUserCodePathEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxUserCodePathEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxUserCodePathEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetUniCondStr(GeneralPlatform.Entity.clsQxUserCodePathEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxUserCodePath(用户生成路径),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxUserCodePathEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserCodePathDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsSetFieldVisibilityDA">
            <summary>
            设置字段可视性(SetFieldVisibility)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsSetFieldVisibilityDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsSetFieldVisibilityDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsSetFieldVisibilityDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetDataTable_SetFieldVisibility(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetSetFieldVisibility(GeneralPlatform.Entity.clsSetFieldVisibilityEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objSetFieldVisibilityEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetSetFieldVisibilityOneBySP(GeneralPlatform.Entity.clsSetFieldVisibilityEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程SetFieldVisibility_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objSetFieldVisibilityEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.AddNewRecord(GeneralPlatform.Entity.clsSetFieldVisibilityEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsSetFieldVisibilityEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objSetFieldVisibilityEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsSetFieldVisibilityEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objSetFieldVisibilityEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsSetFieldVisibilityEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objSetFieldVisibilityEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsSetFieldVisibilityEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objSetFieldVisibilityEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.AddnewSetFieldVisibilityBySP(GeneralPlatform.Entity.clsSetFieldVisibilityEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objSetFieldVisibilityEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.AddnewSetFieldVisibilitys(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.Update(GeneralPlatform.Entity.clsSetFieldVisibilityEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objSetFieldVisibilityEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.UpdateBySP(GeneralPlatform.Entity.clsSetFieldVisibilityEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.UpdateBySql2(GeneralPlatform.Entity.clsSetFieldVisibilityEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objSetFieldVisibilityEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsSetFieldVisibilityEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objSetFieldVisibilityEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsSetFieldVisibilityEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objSetFieldVisibilityEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.UpdateBySql2(GeneralPlatform.Entity.clsSetFieldVisibilityEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objSetFieldVisibilityEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.DelRecordBySP(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.DelRecord(System.Int64,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.DelSetFieldVisibility(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.DelRecord(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.DelSetFieldVisibility(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.DelSetFieldVisibilityWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.CopyTo(GeneralPlatform.Entity.clsSetFieldVisibilityEN,GeneralPlatform.Entity.clsSetFieldVisibilityEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objSetFieldVisibilityENS">源对象</param>
            <param name = "objSetFieldVisibilityENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.CheckPropertyNew(GeneralPlatform.Entity.clsSetFieldVisibilityEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.CheckProperty4Update(GeneralPlatform.Entity.clsSetFieldVisibilityEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.CheckProperty4Condition(GeneralPlatform.Entity.clsSetFieldVisibilityEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetUniCondStr(GeneralPlatform.Entity.clsSetFieldVisibilityEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--SetFieldVisibility(设置字段可视性),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objSetFieldVisibilityEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSetFieldVisibilityDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvExportExcel4UsersDA">
            <summary>
            v导出Excel用户字段(vExportExcel4Users)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvExportExcel4UsersDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvExportExcel4UsersDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvExportExcel4UsersDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetDataTable_vExportExcel4Users(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetvExportExcel4Users(GeneralPlatform.Entity.clsvExportExcel4UsersEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvExportExcel4UsersEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetvExportExcel4UsersOneBySP(GeneralPlatform.Entity.clsvExportExcel4UsersEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vExportExcel4Users_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvExportExcel4UsersEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.CopyTo(GeneralPlatform.Entity.clsvExportExcel4UsersEN,GeneralPlatform.Entity.clsvExportExcel4UsersEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvExportExcel4UsersENS">源对象</param>
            <param name = "objvExportExcel4UsersENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvExportExcel4UsersEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcel4UsersDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvExportExcelSetDA">
            <summary>
            v导出Excel设置(vExportExcelSet)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvExportExcelSetDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvExportExcelSetDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvExportExcelSetDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strIdExportExcel4Users">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strIdExportExcel4Users">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetDataTable_vExportExcelSet(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetvExportExcelSet(GeneralPlatform.Entity.clsvExportExcelSetEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvExportExcelSetEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetObjByIdExportExcel4Users(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strIdExportExcel4Users">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetvExportExcelSetOneBySP(GeneralPlatform.Entity.clsvExportExcelSetEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vExportExcelSet_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvExportExcelSetEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strIdExportExcel4Users">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strIdExportExcel4Users">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.CopyTo(GeneralPlatform.Entity.clsvExportExcelSetEN,GeneralPlatform.Entity.clsvExportExcelSetEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvExportExcelSetENS">源对象</param>
            <param name = "objvExportExcelSetENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvExportExcelSetEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetIdExportExcel4Users">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvExportExcelSetDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxUserCodePathDA">
            <summary>
            v用户生成路径(vQxUserCodePath)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxUserCodePathDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxUserCodePathDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxUserCodePathDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetDataTable_vQxUserCodePath(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetvQxUserCodePath(GeneralPlatform.Entity.clsvQxUserCodePathEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxUserCodePathEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetvQxUserCodePathOneBySP(GeneralPlatform.Entity.clsvQxUserCodePathEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxUserCodePath_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxUserCodePathEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.CopyTo(GeneralPlatform.Entity.clsvQxUserCodePathEN,GeneralPlatform.Entity.clsvQxUserCodePathEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxUserCodePathENS">源对象</param>
            <param name = "objvQxUserCodePathENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxUserCodePathEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserCodePathDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvSetFieldVisibilityDA">
            <summary>
            v设置字段可视性(vSetFieldVisibility)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvSetFieldVisibilityDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetDataTable_vSetFieldVisibility(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetvSetFieldVisibility(GeneralPlatform.Entity.clsvSetFieldVisibilityEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvSetFieldVisibilityEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetvSetFieldVisibilityOneBySP(GeneralPlatform.Entity.clsvSetFieldVisibilityEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vSetFieldVisibility_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvSetFieldVisibilityEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.CopyTo(GeneralPlatform.Entity.clsvSetFieldVisibilityEN,GeneralPlatform.Entity.clsvSetFieldVisibilityEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvSetFieldVisibilityENS">源对象</param>
            <param name = "objvSetFieldVisibilityENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvSetFieldVisibilityEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSetFieldVisibilityDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsXzSchoolDA">
            <summary>
            学校(XzSchool)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsXzSchoolDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsXzSchoolDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsXzSchoolDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strIdSchool">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strIdSchool">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetDataTable_XzSchool(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetXzSchool(GeneralPlatform.Entity.clsXzSchoolEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objXzSchoolEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetObjByIdSchool(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strIdSchool">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetXzSchoolOneBySP(GeneralPlatform.Entity.clsXzSchoolEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程XzSchool_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objXzSchoolEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strIdSchool">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strIdSchool">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.AddNewRecord(GeneralPlatform.Entity.clsXzSchoolEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsXzSchoolEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objXzSchoolEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsXzSchoolEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objXzSchoolEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsXzSchoolEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objXzSchoolEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsXzSchoolEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objXzSchoolEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.AddnewXzSchoolBySP(GeneralPlatform.Entity.clsXzSchoolEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objXzSchoolEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.AddnewXzSchools(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.Update(GeneralPlatform.Entity.clsXzSchoolEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objXzSchoolEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.UpdateBySP(GeneralPlatform.Entity.clsXzSchoolEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.UpdateBySql2(GeneralPlatform.Entity.clsXzSchoolEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objXzSchoolEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsXzSchoolEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objXzSchoolEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsXzSchoolEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objXzSchoolEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.UpdateBySql2(GeneralPlatform.Entity.clsXzSchoolEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objXzSchoolEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strIdSchool">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strIdSchool">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.DelXzSchool(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strIdSchool">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.DelXzSchool(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.DelXzSchoolWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.CopyTo(GeneralPlatform.Entity.clsXzSchoolEN,GeneralPlatform.Entity.clsXzSchoolEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objXzSchoolENS">源对象</param>
            <param name = "objXzSchoolENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.CheckPropertyNew(GeneralPlatform.Entity.clsXzSchoolEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.CheckProperty4Update(GeneralPlatform.Entity.clsXzSchoolEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.CheckProperty4Condition(GeneralPlatform.Entity.clsXzSchoolEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetIdSchool">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzSchoolDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxPrjTabDA">
            <summary>
            工程表(QxPrjTab)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxPrjTabDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxPrjTabDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxPrjTabDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strTabId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strTabId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetDataTable_QxPrjTab(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetQxPrjTab(GeneralPlatform.Entity.clsQxPrjTabEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxPrjTabEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetObjByTabId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strTabId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetQxPrjTabOneBySP(GeneralPlatform.Entity.clsQxPrjTabEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxPrjTab_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxPrjTabEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strTabId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strTabId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.AddNewRecord(GeneralPlatform.Entity.clsQxPrjTabEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxPrjTabEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxPrjTabEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxPrjTabEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxPrjTabEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxPrjTabEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxPrjTabEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.AddnewQxPrjTabBySP(GeneralPlatform.Entity.clsQxPrjTabEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxPrjTabEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.AddnewQxPrjTabs(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.Update(GeneralPlatform.Entity.clsQxPrjTabEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxPrjTabEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.UpdateBySP(GeneralPlatform.Entity.clsQxPrjTabEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.UpdateBySql2(GeneralPlatform.Entity.clsQxPrjTabEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxPrjTabEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxPrjTabEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxPrjTabEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxPrjTabEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxPrjTabEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.UpdateBySql2(GeneralPlatform.Entity.clsQxPrjTabEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxPrjTabEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strTabId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strTabId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.DelQxPrjTab(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strTabId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.DelQxPrjTab(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.DelQxPrjTabWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.CopyTo(GeneralPlatform.Entity.clsQxPrjTabEN,GeneralPlatform.Entity.clsQxPrjTabEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxPrjTabENS">源对象</param>
            <param name = "objQxPrjTabENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxPrjTabEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxPrjTabEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxPrjTabEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetTabId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetUniCondStr(GeneralPlatform.Entity.clsQxPrjTabEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxPrjTab(工程表),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxPrjTabEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjTabDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsSQLDSTypeDA">
            <summary>
            Sql数据源类型(SQLDSType)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsSQLDSTypeDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsSQLDSTypeDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsSQLDSTypeDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strSQLDSTypeId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strSQLDSTypeId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetDataTable_SQLDSType(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetSQLDSType(GeneralPlatform.Entity.clsSQLDSTypeEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objSQLDSTypeEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetObjBySQLDSTypeId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strSQLDSTypeId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetSQLDSTypeOneBySP(GeneralPlatform.Entity.clsSQLDSTypeEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程SQLDSType_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objSQLDSTypeEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strSQLDSTypeId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strSQLDSTypeId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.AddNewRecord(GeneralPlatform.Entity.clsSQLDSTypeEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsSQLDSTypeEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objSQLDSTypeEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsSQLDSTypeEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objSQLDSTypeEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsSQLDSTypeEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objSQLDSTypeEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsSQLDSTypeEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objSQLDSTypeEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.AddnewSQLDSTypeBySP(GeneralPlatform.Entity.clsSQLDSTypeEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objSQLDSTypeEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.AddnewSQLDSTypes(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.Update(GeneralPlatform.Entity.clsSQLDSTypeEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objSQLDSTypeEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.UpdateBySP(GeneralPlatform.Entity.clsSQLDSTypeEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.UpdateBySql2(GeneralPlatform.Entity.clsSQLDSTypeEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objSQLDSTypeEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsSQLDSTypeEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objSQLDSTypeEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsSQLDSTypeEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objSQLDSTypeEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.UpdateBySql2(GeneralPlatform.Entity.clsSQLDSTypeEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objSQLDSTypeEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strSQLDSTypeId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strSQLDSTypeId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.DelSQLDSType(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strSQLDSTypeId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.DelSQLDSType(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.DelSQLDSTypeWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.CopyTo(GeneralPlatform.Entity.clsSQLDSTypeEN,GeneralPlatform.Entity.clsSQLDSTypeEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objSQLDSTypeENS">源对象</param>
            <param name = "objSQLDSTypeENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.CheckPropertyNew(GeneralPlatform.Entity.clsSQLDSTypeEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.CheckProperty4Update(GeneralPlatform.Entity.clsSQLDSTypeEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.CheckProperty4Condition(GeneralPlatform.Entity.clsSQLDSTypeEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetSQLDSTypeId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSQLDSTypeDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsTabStateDA">
            <summary>
            表状态(TabState)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsTabStateDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsTabStateDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsTabStateDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strTabStateId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strTabStateId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetDataTable_TabState(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetTabState(GeneralPlatform.Entity.clsTabStateEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objTabStateEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetObjByTabStateId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strTabStateId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetTabStateOneBySP(GeneralPlatform.Entity.clsTabStateEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程TabState_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objTabStateEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strTabStateId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strTabStateId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.AddNewRecord(GeneralPlatform.Entity.clsTabStateEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsTabStateEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objTabStateEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsTabStateEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objTabStateEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsTabStateEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objTabStateEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsTabStateEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objTabStateEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.AddnewTabStateBySP(GeneralPlatform.Entity.clsTabStateEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objTabStateEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.AddnewTabStates(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.Update(GeneralPlatform.Entity.clsTabStateEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objTabStateEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.UpdateBySP(GeneralPlatform.Entity.clsTabStateEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.UpdateBySql2(GeneralPlatform.Entity.clsTabStateEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objTabStateEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsTabStateEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objTabStateEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsTabStateEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objTabStateEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.UpdateBySql2(GeneralPlatform.Entity.clsTabStateEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objTabStateEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strTabStateId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strTabStateId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.DelTabState(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strTabStateId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.DelTabState(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.DelTabStateWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.CopyTo(GeneralPlatform.Entity.clsTabStateEN,GeneralPlatform.Entity.clsTabStateEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objTabStateENS">源对象</param>
            <param name = "objTabStateENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.CheckPropertyNew(GeneralPlatform.Entity.clsTabStateEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.CheckProperty4Update(GeneralPlatform.Entity.clsTabStateEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.CheckProperty4Condition(GeneralPlatform.Entity.clsTabStateEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetTabStateId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabStateDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsTabTypeDA">
            <summary>
            表类型(TabType)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsTabTypeDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsTabTypeDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsTabTypeDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strTabTypeId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strTabTypeId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetDataTable_TabType(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetTabType(GeneralPlatform.Entity.clsTabTypeEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objTabTypeEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetObjByTabTypeId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strTabTypeId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetTabTypeOneBySP(GeneralPlatform.Entity.clsTabTypeEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程TabType_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objTabTypeEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strTabTypeId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strTabTypeId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.AddNewRecord(GeneralPlatform.Entity.clsTabTypeEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsTabTypeEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objTabTypeEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsTabTypeEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objTabTypeEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsTabTypeEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objTabTypeEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsTabTypeEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objTabTypeEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.AddnewTabTypeBySP(GeneralPlatform.Entity.clsTabTypeEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objTabTypeEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.AddnewTabTypes(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.Update(GeneralPlatform.Entity.clsTabTypeEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objTabTypeEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.UpdateBySP(GeneralPlatform.Entity.clsTabTypeEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.UpdateBySql2(GeneralPlatform.Entity.clsTabTypeEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objTabTypeEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsTabTypeEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objTabTypeEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsTabTypeEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objTabTypeEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.UpdateBySql2(GeneralPlatform.Entity.clsTabTypeEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objTabTypeEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strTabTypeId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strTabTypeId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.DelTabType(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strTabTypeId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.DelTabType(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.DelTabTypeWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.CopyTo(GeneralPlatform.Entity.clsTabTypeEN,GeneralPlatform.Entity.clsTabTypeEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objTabTypeENS">源对象</param>
            <param name = "objTabTypeENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.CheckPropertyNew(GeneralPlatform.Entity.clsTabTypeEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.CheckProperty4Update(GeneralPlatform.Entity.clsTabTypeEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.CheckProperty4Condition(GeneralPlatform.Entity.clsTabTypeEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetTabTypeId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsTabTypeDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxPrjTabDA">
            <summary>
            v工程表(vQxPrjTab)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxPrjTabDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxPrjTabDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxPrjTabDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strTabId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strTabId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetDataTable_vQxPrjTab(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetvQxPrjTab(GeneralPlatform.Entity.clsvQxPrjTabEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxPrjTabEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetObjByTabId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strTabId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetvQxPrjTabOneBySP(GeneralPlatform.Entity.clsvQxPrjTabEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxPrjTab_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxPrjTabEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strTabId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strTabId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.CopyTo(GeneralPlatform.Entity.clsvQxPrjTabEN,GeneralPlatform.Entity.clsvQxPrjTabEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxPrjTabENS">源对象</param>
            <param name = "objvQxPrjTabENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxPrjTabEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjTabDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxDepartmentInfoDA">
            <summary>
            部门(QxDepartmentInfo)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxDepartmentInfoDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxDepartmentInfoDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxDepartmentInfoDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strDepartmentId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strDepartmentId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetDataTable_QxDepartmentInfo(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetQxDepartmentInfo(GeneralPlatform.Entity.clsQxDepartmentInfoEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxDepartmentInfoEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetObjByDepartmentId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strDepartmentId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetQxDepartmentInfoOneBySP(GeneralPlatform.Entity.clsQxDepartmentInfoEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxDepartmentInfo_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxDepartmentInfoEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strDepartmentId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strDepartmentId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.AddNewRecord(GeneralPlatform.Entity.clsQxDepartmentInfoEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxDepartmentInfoEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxDepartmentInfoEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxDepartmentInfoEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxDepartmentInfoEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxDepartmentInfoEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxDepartmentInfoEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxDepartmentInfoEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxDepartmentInfoEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.AddnewQxDepartmentInfoBySP(GeneralPlatform.Entity.clsQxDepartmentInfoEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxDepartmentInfoEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.AddnewQxDepartmentInfos(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.Update(GeneralPlatform.Entity.clsQxDepartmentInfoEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxDepartmentInfoEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.UpdateBySP(GeneralPlatform.Entity.clsQxDepartmentInfoEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.UpdateBySql2(GeneralPlatform.Entity.clsQxDepartmentInfoEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxDepartmentInfoEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxDepartmentInfoEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxDepartmentInfoEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxDepartmentInfoEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxDepartmentInfoEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.UpdateBySql2(GeneralPlatform.Entity.clsQxDepartmentInfoEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxDepartmentInfoEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strDepartmentId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strDepartmentId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.DelQxDepartmentInfo(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strDepartmentId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.DelQxDepartmentInfo(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.DelQxDepartmentInfoWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.CopyTo(GeneralPlatform.Entity.clsQxDepartmentInfoEN,GeneralPlatform.Entity.clsQxDepartmentInfoEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxDepartmentInfoENS">源对象</param>
            <param name = "objQxDepartmentInfoENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxDepartmentInfoEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxDepartmentInfoEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxDepartmentInfoEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetDepartmentId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA">
            <summary>
            部门V2(QxDepartmentInfoV2)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetDataTable_QxDepartmentInfoV2(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetQxDepartmentInfoV2(GeneralPlatform.Entity.clsQxDepartmentInfoV2EN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxDepartmentInfoV2EN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetObjByDepartmentIdInt(System.Int32)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "intDepartmentIdInt">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetQxDepartmentInfoV2OneBySP(GeneralPlatform.Entity.clsQxDepartmentInfoV2EN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxDepartmentInfoV2_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxDepartmentInfoV2EN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.IsExist(System.Int32)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "intDepartmentIdInt">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.IsExistBySP(System.Int32)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "intDepartmentIdInt">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.AddNewRecord(GeneralPlatform.Entity.clsQxDepartmentInfoV2EN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxDepartmentInfoV2EN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxDepartmentInfoV2EN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxDepartmentInfoV2EN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxDepartmentInfoV2EN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxDepartmentInfoV2EN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxDepartmentInfoV2EN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxDepartmentInfoV2EN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxDepartmentInfoV2EN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.AddnewQxDepartmentInfoV2BySP(GeneralPlatform.Entity.clsQxDepartmentInfoV2EN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxDepartmentInfoV2EN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.AddnewQxDepartmentInfoV2s(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.Update(GeneralPlatform.Entity.clsQxDepartmentInfoV2EN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxDepartmentInfoV2EN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.UpdateBySP(GeneralPlatform.Entity.clsQxDepartmentInfoV2EN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.UpdateBySql2(GeneralPlatform.Entity.clsQxDepartmentInfoV2EN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxDepartmentInfoV2EN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxDepartmentInfoV2EN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxDepartmentInfoV2EN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxDepartmentInfoV2EN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxDepartmentInfoV2EN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.UpdateBySql2(GeneralPlatform.Entity.clsQxDepartmentInfoV2EN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxDepartmentInfoV2EN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.DelRecordBySP(System.Int32)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "intDepartmentIdInt">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.DelRecord(System.Int32,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "intDepartmentIdInt">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.DelQxDepartmentInfoV2(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.DelRecord(System.Int32)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "intDepartmentIdInt">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.DelQxDepartmentInfoV2(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.DelQxDepartmentInfoV2WithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.CopyTo(GeneralPlatform.Entity.clsQxDepartmentInfoV2EN,GeneralPlatform.Entity.clsQxDepartmentInfoV2EN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxDepartmentInfoV2ENS">源对象</param>
            <param name = "objQxDepartmentInfoV2ENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.CheckPropertyNew(GeneralPlatform.Entity.clsQxDepartmentInfoV2EN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.CheckProperty4Update(GeneralPlatform.Entity.clsQxDepartmentInfoV2EN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxDepartmentInfoV2EN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetDepartmentIdInt">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetUniCondStr(GeneralPlatform.Entity.clsQxDepartmentInfoV2EN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxDepartmentInfoV2(部门V2),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxDepartmentInfoV2EN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxDepartmentInfoV2DA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxPrjUserRelationDA">
            <summary>
            工程用户关系(QxPrjUserRelation)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxPrjUserRelationDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxPrjUserRelationDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxPrjUserRelationDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetDataTable_QxPrjUserRelation(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetQxPrjUserRelation(GeneralPlatform.Entity.clsQxPrjUserRelationEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxPrjUserRelationEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetQxPrjUserRelationOneBySP(GeneralPlatform.Entity.clsQxPrjUserRelationEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxPrjUserRelation_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxPrjUserRelationEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.AddNewRecord(GeneralPlatform.Entity.clsQxPrjUserRelationEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxPrjUserRelationEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxPrjUserRelationEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxPrjUserRelationEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxPrjUserRelationEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxPrjUserRelationEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxPrjUserRelationEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxPrjUserRelationEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxPrjUserRelationEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.AddnewQxPrjUserRelationBySP(GeneralPlatform.Entity.clsQxPrjUserRelationEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxPrjUserRelationEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.AddnewQxPrjUserRelations(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.Update(GeneralPlatform.Entity.clsQxPrjUserRelationEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxPrjUserRelationEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.UpdateBySP(GeneralPlatform.Entity.clsQxPrjUserRelationEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.UpdateBySql2(GeneralPlatform.Entity.clsQxPrjUserRelationEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxPrjUserRelationEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxPrjUserRelationEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxPrjUserRelationEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxPrjUserRelationEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxPrjUserRelationEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.UpdateBySql2(GeneralPlatform.Entity.clsQxPrjUserRelationEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxPrjUserRelationEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.DelRecordBySP(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.DelRecord(System.Int64,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.DelQxPrjUserRelation(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.DelRecord(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.DelQxPrjUserRelation(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.DelQxPrjUserRelationWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.CopyTo(GeneralPlatform.Entity.clsQxPrjUserRelationEN,GeneralPlatform.Entity.clsQxPrjUserRelationEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxPrjUserRelationENS">源对象</param>
            <param name = "objQxPrjUserRelationENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxPrjUserRelationEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxPrjUserRelationEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxPrjUserRelationEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetUniCondStr(GeneralPlatform.Entity.clsQxPrjUserRelationEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxPrjUserRelation(工程用户关系),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxPrjUserRelationEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxPrjUserRelationDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxRoleRightRelationDA">
            <summary>
            角色赋权关系(QxRoleRightRelation)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxRoleRightRelationDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxRoleRightRelationDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxRoleRightRelationDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetDataTable_QxRoleRightRelation(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetQxRoleRightRelation(GeneralPlatform.Entity.clsQxRoleRightRelationEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxRoleRightRelationEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetQxRoleRightRelationOneBySP(GeneralPlatform.Entity.clsQxRoleRightRelationEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxRoleRightRelation_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxRoleRightRelationEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.AddNewRecord(GeneralPlatform.Entity.clsQxRoleRightRelationEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxRoleRightRelationEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxRoleRightRelationEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxRoleRightRelationEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxRoleRightRelationEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxRoleRightRelationEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxRoleRightRelationEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxRoleRightRelationEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxRoleRightRelationEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.AddnewQxRoleRightRelationBySP(GeneralPlatform.Entity.clsQxRoleRightRelationEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxRoleRightRelationEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.AddnewQxRoleRightRelations(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.Update(GeneralPlatform.Entity.clsQxRoleRightRelationEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxRoleRightRelationEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.UpdateBySP(GeneralPlatform.Entity.clsQxRoleRightRelationEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.UpdateBySql2(GeneralPlatform.Entity.clsQxRoleRightRelationEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxRoleRightRelationEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxRoleRightRelationEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxRoleRightRelationEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxRoleRightRelationEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxRoleRightRelationEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.UpdateBySql2(GeneralPlatform.Entity.clsQxRoleRightRelationEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxRoleRightRelationEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.DelRecordBySP(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.DelRecord(System.Int64,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.DelQxRoleRightRelation(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.DelRecord(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.DelQxRoleRightRelation(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.DelQxRoleRightRelationWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.CopyTo(GeneralPlatform.Entity.clsQxRoleRightRelationEN,GeneralPlatform.Entity.clsQxRoleRightRelationEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxRoleRightRelationENS">源对象</param>
            <param name = "objQxRoleRightRelationENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxRoleRightRelationEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxRoleRightRelationEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxRoleRightRelationEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetUniCondStr(GeneralPlatform.Entity.clsQxRoleRightRelationEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxRoleRightRelation(角色赋权关系),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxRoleRightRelationEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRoleRightRelationDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxRolesDA">
            <summary>
            角色(QxRoles)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxRolesDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxRolesDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxRolesDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strRoleId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strRoleId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetDataTable_QxRoles(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetQxRoles(GeneralPlatform.Entity.clsQxRolesEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxRolesEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetObjByRoleId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strRoleId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetQxRolesOneBySP(GeneralPlatform.Entity.clsQxRolesEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxRoles_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxRolesEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strRoleId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strRoleId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.AddNewRecord(GeneralPlatform.Entity.clsQxRolesEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxRolesEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxRolesEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxRolesEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxRolesEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxRolesEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxRolesEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.AddnewQxRolesBySP(GeneralPlatform.Entity.clsQxRolesEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxRolesEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.AddnewQxRoless(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.Update(GeneralPlatform.Entity.clsQxRolesEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxRolesEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.UpdateBySP(GeneralPlatform.Entity.clsQxRolesEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.UpdateBySql2(GeneralPlatform.Entity.clsQxRolesEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxRolesEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxRolesEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxRolesEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxRolesEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxRolesEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.UpdateBySql2(GeneralPlatform.Entity.clsQxRolesEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxRolesEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strRoleId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strRoleId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.DelQxRoles(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strRoleId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.DelQxRoles(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.DelQxRolesWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.CopyTo(GeneralPlatform.Entity.clsQxRolesEN,GeneralPlatform.Entity.clsQxRolesEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxRolesENS">源对象</param>
            <param name = "objQxRolesENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxRolesEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxRolesEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxRolesEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetRoleId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetUniCondStr(GeneralPlatform.Entity.clsQxRolesEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxRoles(角色),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxRolesEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxRolesV2DA">
            <summary>
            角色V2(QxRolesV2)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxRolesV2DA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxRolesV2DA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxRolesV2DA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetDataTable_QxRolesV2(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetQxRolesV2(GeneralPlatform.Entity.clsQxRolesV2EN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxRolesV2EN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetObjByRId(System.Int32)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "intRId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetQxRolesV2OneBySP(GeneralPlatform.Entity.clsQxRolesV2EN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxRolesV2_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxRolesV2EN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.IsExist(System.Int32)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "intRId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.IsExistBySP(System.Int32)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "intRId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.AddNewRecord(GeneralPlatform.Entity.clsQxRolesV2EN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxRolesV2EN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxRolesV2EN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxRolesV2EN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxRolesV2EN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxRolesV2EN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxRolesV2EN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxRolesV2EN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxRolesV2EN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.AddnewQxRolesV2BySP(GeneralPlatform.Entity.clsQxRolesV2EN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxRolesV2EN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.AddnewQxRolesV2s(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.Update(GeneralPlatform.Entity.clsQxRolesV2EN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxRolesV2EN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.UpdateBySP(GeneralPlatform.Entity.clsQxRolesV2EN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.UpdateBySql2(GeneralPlatform.Entity.clsQxRolesV2EN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxRolesV2EN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxRolesV2EN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxRolesV2EN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxRolesV2EN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxRolesV2EN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.UpdateBySql2(GeneralPlatform.Entity.clsQxRolesV2EN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxRolesV2EN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.DelRecordBySP(System.Int32)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "intRId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.DelRecord(System.Int32,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "intRId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.DelQxRolesV2(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.DelRecord(System.Int32)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "intRId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.DelQxRolesV2(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.DelQxRolesV2WithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.CopyTo(GeneralPlatform.Entity.clsQxRolesV2EN,GeneralPlatform.Entity.clsQxRolesV2EN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxRolesV2ENS">源对象</param>
            <param name = "objQxRolesV2ENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.CheckPropertyNew(GeneralPlatform.Entity.clsQxRolesV2EN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.CheckProperty4Update(GeneralPlatform.Entity.clsQxRolesV2EN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxRolesV2EN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetRId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetUniCondStr(GeneralPlatform.Entity.clsQxRolesV2EN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxRolesV2(角色V2),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxRolesV2EN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolesV2DA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUserGroupRelationDA">
            <summary>
            用户/组关系(QxUserGroupRelation)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUserGroupRelationDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUserGroupRelationDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxUserGroupRelationDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetDataTable_QxUserGroupRelation(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetQxUserGroupRelation(GeneralPlatform.Entity.clsQxUserGroupRelationEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxUserGroupRelationEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetQxUserGroupRelationOneBySP(GeneralPlatform.Entity.clsQxUserGroupRelationEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxUserGroupRelation_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxUserGroupRelationEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.AddNewRecord(GeneralPlatform.Entity.clsQxUserGroupRelationEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUserGroupRelationEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxUserGroupRelationEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUserGroupRelationEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxUserGroupRelationEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUserGroupRelationEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxUserGroupRelationEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUserGroupRelationEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxUserGroupRelationEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.AddnewQxUserGroupRelationBySP(GeneralPlatform.Entity.clsQxUserGroupRelationEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxUserGroupRelationEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.AddnewQxUserGroupRelations(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.Update(GeneralPlatform.Entity.clsQxUserGroupRelationEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxUserGroupRelationEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.UpdateBySP(GeneralPlatform.Entity.clsQxUserGroupRelationEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.UpdateBySql2(GeneralPlatform.Entity.clsQxUserGroupRelationEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxUserGroupRelationEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxUserGroupRelationEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxUserGroupRelationEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxUserGroupRelationEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxUserGroupRelationEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.UpdateBySql2(GeneralPlatform.Entity.clsQxUserGroupRelationEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxUserGroupRelationEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.DelRecordBySP(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.DelRecord(System.Int64,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.DelQxUserGroupRelation(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.DelRecord(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.DelQxUserGroupRelation(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.DelQxUserGroupRelationWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.CopyTo(GeneralPlatform.Entity.clsQxUserGroupRelationEN,GeneralPlatform.Entity.clsQxUserGroupRelationEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxUserGroupRelationENS">源对象</param>
            <param name = "objQxUserGroupRelationENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxUserGroupRelationEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxUserGroupRelationEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxUserGroupRelationEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetUniCondStr(GeneralPlatform.Entity.clsQxUserGroupRelationEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxUserGroupRelation(用户/组关系),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxUserGroupRelationEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupRelationDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUserGroupsDA">
            <summary>
            用户组(QxUserGroups)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUserGroupsDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUserGroupsDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxUserGroupsDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strGroupId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strGroupId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetDataTable_QxUserGroups(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetQxUserGroups(GeneralPlatform.Entity.clsQxUserGroupsEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxUserGroupsEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetObjByGroupId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strGroupId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetQxUserGroupsOneBySP(GeneralPlatform.Entity.clsQxUserGroupsEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxUserGroups_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxUserGroupsEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strGroupId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strGroupId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.AddNewRecord(GeneralPlatform.Entity.clsQxUserGroupsEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUserGroupsEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxUserGroupsEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUserGroupsEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxUserGroupsEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUserGroupsEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxUserGroupsEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.AddnewQxUserGroupsBySP(GeneralPlatform.Entity.clsQxUserGroupsEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxUserGroupsEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.AddnewQxUserGroupss(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.Update(GeneralPlatform.Entity.clsQxUserGroupsEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxUserGroupsEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.UpdateBySP(GeneralPlatform.Entity.clsQxUserGroupsEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.UpdateBySql2(GeneralPlatform.Entity.clsQxUserGroupsEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxUserGroupsEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxUserGroupsEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxUserGroupsEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxUserGroupsEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxUserGroupsEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.UpdateBySql2(GeneralPlatform.Entity.clsQxUserGroupsEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxUserGroupsEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strGroupId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strGroupId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.DelQxUserGroups(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strGroupId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.DelQxUserGroups(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.DelQxUserGroupsWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.CopyTo(GeneralPlatform.Entity.clsQxUserGroupsEN,GeneralPlatform.Entity.clsQxUserGroupsEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxUserGroupsENS">源对象</param>
            <param name = "objQxUserGroupsENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxUserGroupsEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxUserGroupsEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxUserGroupsEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetGroupId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetUniCondStr(GeneralPlatform.Entity.clsQxUserGroupsEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxUserGroups(用户组),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxUserGroupsEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupsDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUserIdentityDA">
            <summary>
            用户权限身份(QxUserIdentity)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUserIdentityDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUserIdentityDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxUserIdentityDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strIdentityId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strIdentityId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetDataTable_QxUserIdentity(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetQxUserIdentity(GeneralPlatform.Entity.clsQxUserIdentityEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxUserIdentityEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetObjByIdentityId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strIdentityId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetQxUserIdentityOneBySP(GeneralPlatform.Entity.clsQxUserIdentityEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxUserIdentity_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxUserIdentityEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strIdentityId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strIdentityId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.AddNewRecord(GeneralPlatform.Entity.clsQxUserIdentityEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUserIdentityEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxUserIdentityEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUserIdentityEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxUserIdentityEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUserIdentityEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxUserIdentityEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUserIdentityEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxUserIdentityEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.AddnewQxUserIdentityBySP(GeneralPlatform.Entity.clsQxUserIdentityEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxUserIdentityEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.AddnewQxUserIdentitys(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.Update(GeneralPlatform.Entity.clsQxUserIdentityEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxUserIdentityEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.UpdateBySP(GeneralPlatform.Entity.clsQxUserIdentityEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.UpdateBySql2(GeneralPlatform.Entity.clsQxUserIdentityEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxUserIdentityEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxUserIdentityEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxUserIdentityEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxUserIdentityEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxUserIdentityEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.UpdateBySql2(GeneralPlatform.Entity.clsQxUserIdentityEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxUserIdentityEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strIdentityId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strIdentityId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.DelQxUserIdentity(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strIdentityId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.DelQxUserIdentity(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.DelQxUserIdentityWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.CopyTo(GeneralPlatform.Entity.clsQxUserIdentityEN,GeneralPlatform.Entity.clsQxUserIdentityEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxUserIdentityENS">源对象</param>
            <param name = "objQxUserIdentityENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxUserIdentityEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxUserIdentityEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxUserIdentityEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetIdentityId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserIdentityDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUserLoginNameDA">
            <summary>
            用户登录名(QxUserLoginName)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUserLoginNameDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUserLoginNameDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxUserLoginNameDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strUserLoginName">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strUserLoginName">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetDataTable_QxUserLoginName(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetQxUserLoginName(GeneralPlatform.Entity.clsQxUserLoginNameEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxUserLoginNameEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetObjByUserLoginName(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strUserLoginName">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetQxUserLoginNameOneBySP(GeneralPlatform.Entity.clsQxUserLoginNameEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxUserLoginName_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxUserLoginNameEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strUserLoginName">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strUserLoginName">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.AddNewRecord(GeneralPlatform.Entity.clsQxUserLoginNameEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUserLoginNameEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxUserLoginNameEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUserLoginNameEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxUserLoginNameEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUserLoginNameEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxUserLoginNameEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUserLoginNameEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxUserLoginNameEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.AddnewQxUserLoginNameBySP(GeneralPlatform.Entity.clsQxUserLoginNameEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxUserLoginNameEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.AddnewQxUserLoginNames(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.Update(GeneralPlatform.Entity.clsQxUserLoginNameEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxUserLoginNameEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.UpdateBySP(GeneralPlatform.Entity.clsQxUserLoginNameEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.UpdateBySql2(GeneralPlatform.Entity.clsQxUserLoginNameEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxUserLoginNameEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxUserLoginNameEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxUserLoginNameEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxUserLoginNameEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxUserLoginNameEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.UpdateBySql2(GeneralPlatform.Entity.clsQxUserLoginNameEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxUserLoginNameEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strUserLoginName">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strUserLoginName">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.DelQxUserLoginName(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strUserLoginName">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.DelQxUserLoginName(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.DelQxUserLoginNameWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.CopyTo(GeneralPlatform.Entity.clsQxUserLoginNameEN,GeneralPlatform.Entity.clsQxUserLoginNameEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxUserLoginNameENS">源对象</param>
            <param name = "objQxUserLoginNameENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxUserLoginNameEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxUserLoginNameEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxUserLoginNameEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserLoginNameDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUserRoleRelationDA">
            <summary>
            用户角色关系(QxUserRoleRelation)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUserRoleRelationDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUserRoleRelationDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxUserRoleRelationDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetDataTable_QxUserRoleRelation(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetQxUserRoleRelation(GeneralPlatform.Entity.clsQxUserRoleRelationEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxUserRoleRelationEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetQxUserRoleRelationOneBySP(GeneralPlatform.Entity.clsQxUserRoleRelationEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxUserRoleRelation_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxUserRoleRelationEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.AddNewRecord(GeneralPlatform.Entity.clsQxUserRoleRelationEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUserRoleRelationEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxUserRoleRelationEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUserRoleRelationEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxUserRoleRelationEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUserRoleRelationEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxUserRoleRelationEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUserRoleRelationEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxUserRoleRelationEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.AddnewQxUserRoleRelationBySP(GeneralPlatform.Entity.clsQxUserRoleRelationEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxUserRoleRelationEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.AddnewQxUserRoleRelations(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.Update(GeneralPlatform.Entity.clsQxUserRoleRelationEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxUserRoleRelationEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.UpdateBySP(GeneralPlatform.Entity.clsQxUserRoleRelationEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.UpdateBySql2(GeneralPlatform.Entity.clsQxUserRoleRelationEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxUserRoleRelationEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxUserRoleRelationEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxUserRoleRelationEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxUserRoleRelationEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxUserRoleRelationEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.UpdateBySql2(GeneralPlatform.Entity.clsQxUserRoleRelationEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxUserRoleRelationEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.DelRecordBySP(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.DelRecord(System.Int64,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.DelQxUserRoleRelation(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.DelRecord(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.DelQxUserRoleRelation(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.DelQxUserRoleRelationWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.CopyTo(GeneralPlatform.Entity.clsQxUserRoleRelationEN,GeneralPlatform.Entity.clsQxUserRoleRelationEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxUserRoleRelationENS">源对象</param>
            <param name = "objQxUserRoleRelationENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxUserRoleRelationEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxUserRoleRelationEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxUserRoleRelationEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetUniCondStr(GeneralPlatform.Entity.clsQxUserRoleRelationEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxUserRoleRelation(用户角色关系),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxUserRoleRelationEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA">
            <summary>
            用户角色关系V2(QxUserRoleRelationV2)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetDataTable_QxUserRoleRelationV2(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetQxUserRoleRelationV2(GeneralPlatform.Entity.clsQxUserRoleRelationV2EN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxUserRoleRelationV2EN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetObjByKeyLst(System.Int32,System.Int32)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "intUId">表关键字</param>
            <param name = "intRId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetQxUserRoleRelationV2OneBySP(GeneralPlatform.Entity.clsQxUserRoleRelationV2EN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxUserRoleRelationV2_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxUserRoleRelationV2EN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.IsExist(System.Int32,System.Int32)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "intUId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.IsExistBySP(System.Int32,System.Int32)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "intUId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.AddNewRecord(GeneralPlatform.Entity.clsQxUserRoleRelationV2EN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUserRoleRelationV2EN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxUserRoleRelationV2EN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUserRoleRelationV2EN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxUserRoleRelationV2EN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUserRoleRelationV2EN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxUserRoleRelationV2EN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUserRoleRelationV2EN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxUserRoleRelationV2EN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.AddnewQxUserRoleRelationV2BySP(GeneralPlatform.Entity.clsQxUserRoleRelationV2EN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxUserRoleRelationV2EN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.AddnewQxUserRoleRelationV2s(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.Update(GeneralPlatform.Entity.clsQxUserRoleRelationV2EN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxUserRoleRelationV2EN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.UpdateBySP(GeneralPlatform.Entity.clsQxUserRoleRelationV2EN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.UpdateBySql2(GeneralPlatform.Entity.clsQxUserRoleRelationV2EN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxUserRoleRelationV2EN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxUserRoleRelationV2EN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxUserRoleRelationV2EN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxUserRoleRelationV2EN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxUserRoleRelationV2EN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.UpdateBySql2(GeneralPlatform.Entity.clsQxUserRoleRelationV2EN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxUserRoleRelationV2EN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.DelRecordBySP(System.Int32,System.Int32)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "intUId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.DelRecord(System.Int32,System.Int32,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "intUId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.DelRecKeyLsts(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.DelRecord(System.Int32,System.Int32)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "intUId">给定的关键字值</param>
            <param name = "intRId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.DelQxUserRoleRelationV2(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.DelQxUserRoleRelationV2WithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.CopyTo(GeneralPlatform.Entity.clsQxUserRoleRelationV2EN,GeneralPlatform.Entity.clsQxUserRoleRelationV2EN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxUserRoleRelationV2ENS">源对象</param>
            <param name = "objQxUserRoleRelationV2ENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.CheckPropertyNew(GeneralPlatform.Entity.clsQxUserRoleRelationV2EN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.CheckProperty4Update(GeneralPlatform.Entity.clsQxUserRoleRelationV2EN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxUserRoleRelationV2EN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserRoleRelationV2DA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUsersDA">
            <summary>
            用户(QxUsers)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUsersDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUsersDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxUsersDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strUserId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strUserId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetDataTable_QxUsers(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetQxUsers(GeneralPlatform.Entity.clsQxUsersEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxUsersEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetObjByUserId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strUserId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetQxUsersOneBySP(GeneralPlatform.Entity.clsQxUsersEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxUsers_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxUsersEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strUserId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strUserId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.AddNewRecord(GeneralPlatform.Entity.clsQxUsersEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUsersEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxUsersEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUsersEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxUsersEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUsersEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxUsersEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUsersEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxUsersEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.AddnewQxUsersBySP(GeneralPlatform.Entity.clsQxUsersEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxUsersEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.AddnewQxUserss(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.Update(GeneralPlatform.Entity.clsQxUsersEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxUsersEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.UpdateBySP(GeneralPlatform.Entity.clsQxUsersEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.UpdateBySql2(GeneralPlatform.Entity.clsQxUsersEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxUsersEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxUsersEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxUsersEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxUsersEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxUsersEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.UpdateBySql2(GeneralPlatform.Entity.clsQxUsersEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxUsersEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strUserId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strUserId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.DelQxUsers(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strUserId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.DelQxUsers(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.DelQxUsersWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.CopyTo(GeneralPlatform.Entity.clsQxUsersEN,GeneralPlatform.Entity.clsQxUsersEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxUsersENS">源对象</param>
            <param name = "objQxUsersENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxUsersEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxUsersEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxUsersEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetUserId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUserStateDA">
            <summary>
            用户状态(QxUserState)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUserStateDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUserStateDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxUserStateDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strUserStateId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strUserStateId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetDataTable_QxUserState(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetQxUserState(GeneralPlatform.Entity.clsQxUserStateEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxUserStateEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetObjByUserStateId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strUserStateId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetQxUserStateOneBySP(GeneralPlatform.Entity.clsQxUserStateEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxUserState_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxUserStateEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strUserStateId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strUserStateId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.AddNewRecord(GeneralPlatform.Entity.clsQxUserStateEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUserStateEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxUserStateEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUserStateEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxUserStateEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUserStateEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxUserStateEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUserStateEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxUserStateEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.AddnewQxUserStateBySP(GeneralPlatform.Entity.clsQxUserStateEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxUserStateEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.AddnewQxUserStates(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.Update(GeneralPlatform.Entity.clsQxUserStateEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxUserStateEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.UpdateBySP(GeneralPlatform.Entity.clsQxUserStateEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.UpdateBySql2(GeneralPlatform.Entity.clsQxUserStateEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxUserStateEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxUserStateEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxUserStateEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxUserStateEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxUserStateEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.UpdateBySql2(GeneralPlatform.Entity.clsQxUserStateEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxUserStateEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strUserStateId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strUserStateId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.DelQxUserState(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strUserStateId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.DelQxUserState(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.DelQxUserStateWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.CopyTo(GeneralPlatform.Entity.clsQxUserStateEN,GeneralPlatform.Entity.clsQxUserStateEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxUserStateENS">源对象</param>
            <param name = "objQxUserStateENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxUserStateEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxUserStateEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxUserStateEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetUserStateId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetUniCondStr(GeneralPlatform.Entity.clsQxUserStateEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxUserState(用户状态),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxUserStateEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserStateDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUsersV2DA">
            <summary>
            用户V2(QxUsersV2)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUsersV2DA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUsersV2DA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxUsersV2DA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetDataTable_QxUsersV2(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetQxUsersV2(GeneralPlatform.Entity.clsQxUsersV2EN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxUsersV2EN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetObjByid(System.Int32)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "intid">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetQxUsersV2OneBySP(GeneralPlatform.Entity.clsQxUsersV2EN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxUsersV2_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxUsersV2EN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.IsExist(System.Int32)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "intid">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.IsExistBySP(System.Int32)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "intid">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.AddNewRecord(GeneralPlatform.Entity.clsQxUsersV2EN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUsersV2EN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxUsersV2EN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUsersV2EN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxUsersV2EN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUsersV2EN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxUsersV2EN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUsersV2EN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxUsersV2EN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.AddnewQxUsersV2BySP(GeneralPlatform.Entity.clsQxUsersV2EN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxUsersV2EN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.AddnewQxUsersV2s(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.Update(GeneralPlatform.Entity.clsQxUsersV2EN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxUsersV2EN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.UpdateBySP(GeneralPlatform.Entity.clsQxUsersV2EN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.UpdateBySql2(GeneralPlatform.Entity.clsQxUsersV2EN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxUsersV2EN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxUsersV2EN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxUsersV2EN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxUsersV2EN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxUsersV2EN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.UpdateBySql2(GeneralPlatform.Entity.clsQxUsersV2EN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxUsersV2EN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.DelRecordBySP(System.Int32)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "intid">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.DelRecord(System.Int32,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "intid">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.DelQxUsersV2(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.DelRecord(System.Int32)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "intid">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.DelQxUsersV2(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.DelQxUsersV2WithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.CopyTo(GeneralPlatform.Entity.clsQxUsersV2EN,GeneralPlatform.Entity.clsQxUsersV2EN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxUsersV2ENS">源对象</param>
            <param name = "objQxUsersV2ENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.CheckPropertyNew(GeneralPlatform.Entity.clsQxUsersV2EN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.CheckProperty4Update(GeneralPlatform.Entity.clsQxUsersV2EN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxUsersV2EN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.Getid">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetUniCondStr(GeneralPlatform.Entity.clsQxUsersV2EN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxUsersV2(用户V2),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxUsersV2EN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsersV2DA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUsers_SchoolDA">
            <summary>
            用户_学校(QxUsers_School)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUsers_SchoolDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUsers_SchoolDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxUsers_SchoolDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strUserId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strUserId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetDataTable_QxUsers_School(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetQxUsers_School(GeneralPlatform.Entity.clsQxUsers_SchoolEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxUsers_SchoolEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetObjByUserId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strUserId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetQxUsers_SchoolOneBySP(GeneralPlatform.Entity.clsQxUsers_SchoolEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxUsers_School_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxUsers_SchoolEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strUserId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strUserId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.AddNewRecord(GeneralPlatform.Entity.clsQxUsers_SchoolEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUsers_SchoolEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxUsers_SchoolEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUsers_SchoolEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxUsers_SchoolEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUsers_SchoolEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxUsers_SchoolEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUsers_SchoolEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxUsers_SchoolEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.AddnewQxUsers_SchoolBySP(GeneralPlatform.Entity.clsQxUsers_SchoolEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxUsers_SchoolEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.AddnewQxUsers_Schools(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.Update(GeneralPlatform.Entity.clsQxUsers_SchoolEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxUsers_SchoolEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.UpdateBySP(GeneralPlatform.Entity.clsQxUsers_SchoolEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.UpdateBySql2(GeneralPlatform.Entity.clsQxUsers_SchoolEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxUsers_SchoolEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxUsers_SchoolEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxUsers_SchoolEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxUsers_SchoolEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxUsers_SchoolEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.UpdateBySql2(GeneralPlatform.Entity.clsQxUsers_SchoolEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxUsers_SchoolEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strUserId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strUserId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.DelQxUsers_School(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strUserId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.DelQxUsers_School(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.DelQxUsers_SchoolWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.CopyTo(GeneralPlatform.Entity.clsQxUsers_SchoolEN,GeneralPlatform.Entity.clsQxUsers_SchoolEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxUsers_SchoolENS">源对象</param>
            <param name = "objQxUsers_SchoolENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxUsers_SchoolEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxUsers_SchoolEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxUsers_SchoolEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUsers_SchoolDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsSubjectRelationDA">
            <summary>
            隶属关系(SubjectRelation)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsSubjectRelationDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsSubjectRelationDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsSubjectRelationDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetDataTable_SubjectRelation(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetSubjectRelation(GeneralPlatform.Entity.clsSubjectRelationEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objSubjectRelationEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetSubjectRelationOneBySP(GeneralPlatform.Entity.clsSubjectRelationEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程SubjectRelation_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objSubjectRelationEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.AddNewRecord(GeneralPlatform.Entity.clsSubjectRelationEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsSubjectRelationEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objSubjectRelationEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsSubjectRelationEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objSubjectRelationEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsSubjectRelationEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objSubjectRelationEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsSubjectRelationEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objSubjectRelationEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.AddnewSubjectRelationBySP(GeneralPlatform.Entity.clsSubjectRelationEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objSubjectRelationEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.AddnewSubjectRelations(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.Update(GeneralPlatform.Entity.clsSubjectRelationEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objSubjectRelationEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.UpdateBySP(GeneralPlatform.Entity.clsSubjectRelationEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.UpdateBySql2(GeneralPlatform.Entity.clsSubjectRelationEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objSubjectRelationEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsSubjectRelationEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objSubjectRelationEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsSubjectRelationEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objSubjectRelationEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.UpdateBySql2(GeneralPlatform.Entity.clsSubjectRelationEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objSubjectRelationEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.DelRecordBySP(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.DelRecord(System.Int64,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.DelSubjectRelation(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.DelRecord(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.DelSubjectRelation(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.DelSubjectRelationWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.CopyTo(GeneralPlatform.Entity.clsSubjectRelationEN,GeneralPlatform.Entity.clsSubjectRelationEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objSubjectRelationENS">源对象</param>
            <param name = "objSubjectRelationENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.CheckPropertyNew(GeneralPlatform.Entity.clsSubjectRelationEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.CheckProperty4Update(GeneralPlatform.Entity.clsSubjectRelationEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.CheckProperty4Condition(GeneralPlatform.Entity.clsSubjectRelationEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetUniCondStr(GeneralPlatform.Entity.clsSubjectRelationEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--SubjectRelation(隶属关系),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objSubjectRelationEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsSubjectRelationDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsUserDefaValueDA">
            <summary>
            用户缺省值(UserDefaValue)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsUserDefaValueDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsUserDefaValueDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsUserDefaValueDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetDataTable_UserDefaValue(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetUserDefaValue(GeneralPlatform.Entity.clsUserDefaValueEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objUserDefaValueEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetUserDefaValueOneBySP(GeneralPlatform.Entity.clsUserDefaValueEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程UserDefaValue_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objUserDefaValueEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.AddNewRecord(GeneralPlatform.Entity.clsUserDefaValueEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsUserDefaValueEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objUserDefaValueEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsUserDefaValueEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objUserDefaValueEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsUserDefaValueEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objUserDefaValueEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsUserDefaValueEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objUserDefaValueEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.AddnewUserDefaValueBySP(GeneralPlatform.Entity.clsUserDefaValueEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objUserDefaValueEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.AddnewUserDefaValues(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.Update(GeneralPlatform.Entity.clsUserDefaValueEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objUserDefaValueEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.UpdateBySP(GeneralPlatform.Entity.clsUserDefaValueEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.UpdateBySql2(GeneralPlatform.Entity.clsUserDefaValueEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objUserDefaValueEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsUserDefaValueEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objUserDefaValueEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsUserDefaValueEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objUserDefaValueEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.UpdateBySql2(GeneralPlatform.Entity.clsUserDefaValueEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objUserDefaValueEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.DelRecordBySP(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.DelRecord(System.Int64,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.DelUserDefaValue(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.DelRecord(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.DelUserDefaValue(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.DelUserDefaValueWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.CopyTo(GeneralPlatform.Entity.clsUserDefaValueEN,GeneralPlatform.Entity.clsUserDefaValueEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objUserDefaValueENS">源对象</param>
            <param name = "objUserDefaValueENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.CheckPropertyNew(GeneralPlatform.Entity.clsUserDefaValueEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.CheckProperty4Update(GeneralPlatform.Entity.clsUserDefaValueEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.CheckProperty4Condition(GeneralPlatform.Entity.clsUserDefaValueEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetUniCondStr(GeneralPlatform.Entity.clsUserDefaValueEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--UserDefaValue(用户缺省值),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objUserDefaValueEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsUserDefaValueDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA">
            <summary>
            v部门信息By用户数(vQxDepartmentInfoByUserNum)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strDepartmentId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strDepartmentId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetDataTable_vQxDepartmentInfoByUserNum(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetvQxDepartmentInfoByUserNum(GeneralPlatform.Entity.clsvQxDepartmentInfoByUserNumEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxDepartmentInfoByUserNumEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetObjByDepartmentId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strDepartmentId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetvQxDepartmentInfoByUserNumOneBySP(GeneralPlatform.Entity.clsvQxDepartmentInfoByUserNumEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxDepartmentInfoByUserNum_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxDepartmentInfoByUserNumEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strDepartmentId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strDepartmentId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.CopyTo(GeneralPlatform.Entity.clsvQxDepartmentInfoByUserNumEN,GeneralPlatform.Entity.clsvQxDepartmentInfoByUserNumEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxDepartmentInfoByUserNumENS">源对象</param>
            <param name = "objvQxDepartmentInfoByUserNumENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxDepartmentInfoByUserNumEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetDepartmentId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoByUserNumDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxDepartmentInfoDA">
            <summary>
            v部门(vQxDepartmentInfo)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxDepartmentInfoDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strDepartmentId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strDepartmentId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetDataTable_vQxDepartmentInfo(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetvQxDepartmentInfo(GeneralPlatform.Entity.clsvQxDepartmentInfoEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxDepartmentInfoEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetObjByDepartmentId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strDepartmentId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetvQxDepartmentInfoOneBySP(GeneralPlatform.Entity.clsvQxDepartmentInfoEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxDepartmentInfo_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxDepartmentInfoEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strDepartmentId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strDepartmentId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.CopyTo(GeneralPlatform.Entity.clsvQxDepartmentInfoEN,GeneralPlatform.Entity.clsvQxDepartmentInfoEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxDepartmentInfoENS">源对象</param>
            <param name = "objvQxDepartmentInfoENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxDepartmentInfoEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetDepartmentId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxDepartmentInfoDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA">
            <summary>
            v工程用户关系ByRole(vQxPrjUserRelationByRole)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetDataTable_vQxPrjUserRelationByRole(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetvQxPrjUserRelationByRole(GeneralPlatform.Entity.clsvQxPrjUserRelationByRoleEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxPrjUserRelationByRoleEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetvQxPrjUserRelationByRoleOneBySP(GeneralPlatform.Entity.clsvQxPrjUserRelationByRoleEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxPrjUserRelationByRole_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxPrjUserRelationByRoleEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.CopyTo(GeneralPlatform.Entity.clsvQxPrjUserRelationByRoleEN,GeneralPlatform.Entity.clsvQxPrjUserRelationByRoleEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxPrjUserRelationByRoleENS">源对象</param>
            <param name = "objvQxPrjUserRelationByRoleENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxPrjUserRelationByRoleEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationByRoleDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxPrjUserRelationDA">
            <summary>
            v工程用户关系(vQxPrjUserRelation)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxPrjUserRelationDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetDataTable_vQxPrjUserRelation(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetvQxPrjUserRelation(GeneralPlatform.Entity.clsvQxPrjUserRelationEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxPrjUserRelationEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetvQxPrjUserRelationOneBySP(GeneralPlatform.Entity.clsvQxPrjUserRelationEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxPrjUserRelation_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxPrjUserRelationEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.CopyTo(GeneralPlatform.Entity.clsvQxPrjUserRelationEN,GeneralPlatform.Entity.clsvQxPrjUserRelationEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxPrjUserRelationENS">源对象</param>
            <param name = "objvQxPrjUserRelationENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxPrjUserRelationEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxPrjUserRelationDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxUserLoginNameDA">
            <summary>
            vUserLoginName(vQxUserLoginName)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxUserLoginNameDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxUserLoginNameDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxUserLoginNameDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strUserLoginName">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strUserLoginName">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetDataTable_vQxUserLoginName(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetvQxUserLoginName(GeneralPlatform.Entity.clsvQxUserLoginNameEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxUserLoginNameEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetObjByUserLoginName(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strUserLoginName">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetvQxUserLoginNameOneBySP(GeneralPlatform.Entity.clsvQxUserLoginNameEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxUserLoginName_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxUserLoginNameEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strUserLoginName">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strUserLoginName">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.CopyTo(GeneralPlatform.Entity.clsvQxUserLoginNameEN,GeneralPlatform.Entity.clsvQxUserLoginNameEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxUserLoginNameENS">源对象</param>
            <param name = "objvQxUserLoginNameENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxUserLoginNameEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserLoginNameDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxUserRoleRelationDA">
            <summary>
            v用户角色关系(vQxUserRoleRelation)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxUserRoleRelationDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetDataTable_vQxUserRoleRelation(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetvQxUserRoleRelation(GeneralPlatform.Entity.clsvQxUserRoleRelationEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxUserRoleRelationEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetvQxUserRoleRelationOneBySP(GeneralPlatform.Entity.clsvQxUserRoleRelationEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxUserRoleRelation_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxUserRoleRelationEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.CopyTo(GeneralPlatform.Entity.clsvQxUserRoleRelationEN,GeneralPlatform.Entity.clsvQxUserRoleRelationEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxUserRoleRelationENS">源对象</param>
            <param name = "objvQxUserRoleRelationENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxUserRoleRelationEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRoleRelationDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA">
            <summary>
            v角色By菜单数(vQxUserRolesByMenuNum)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strRoleId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strRoleId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetDataTable_vQxUserRolesByMenuNum(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetvQxUserRolesByMenuNum(GeneralPlatform.Entity.clsvQxUserRolesByMenuNumEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxUserRolesByMenuNumEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetObjByRoleId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strRoleId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetvQxUserRolesByMenuNumOneBySP(GeneralPlatform.Entity.clsvQxUserRolesByMenuNumEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxUserRolesByMenuNum_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxUserRolesByMenuNumEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strRoleId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strRoleId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.CopyTo(GeneralPlatform.Entity.clsvQxUserRolesByMenuNumEN,GeneralPlatform.Entity.clsvQxUserRolesByMenuNumEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxUserRolesByMenuNumENS">源对象</param>
            <param name = "objvQxUserRolesByMenuNumENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxUserRolesByMenuNumEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetRoleId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByMenuNumDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA">
            <summary>
            v角色By权限数(vQxUserRolesByPotenceNum)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strRoleId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strRoleId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetDataTable_vQxUserRolesByPotenceNum(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetvQxUserRolesByPotenceNum(GeneralPlatform.Entity.clsvQxUserRolesByPotenceNumEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxUserRolesByPotenceNumEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetObjByRoleId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strRoleId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetvQxUserRolesByPotenceNumOneBySP(GeneralPlatform.Entity.clsvQxUserRolesByPotenceNumEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxUserRolesByPotenceNum_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxUserRolesByPotenceNumEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strRoleId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strRoleId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.CopyTo(GeneralPlatform.Entity.clsvQxUserRolesByPotenceNumEN,GeneralPlatform.Entity.clsvQxUserRolesByPotenceNumEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxUserRolesByPotenceNumENS">源对象</param>
            <param name = "objvQxUserRolesByPotenceNumENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxUserRolesByPotenceNumEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetRoleId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByPotenceNumDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA">
            <summary>
            v角色By用户数(vQxUserRolesByUserNum)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strRoleId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strRoleId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetDataTable_vQxUserRolesByUserNum(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetvQxUserRolesByUserNum(GeneralPlatform.Entity.clsvQxUserRolesByUserNumEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxUserRolesByUserNumEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetObjByRoleId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strRoleId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetvQxUserRolesByUserNumOneBySP(GeneralPlatform.Entity.clsvQxUserRolesByUserNumEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxUserRolesByUserNum_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxUserRolesByUserNumEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strRoleId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strRoleId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.CopyTo(GeneralPlatform.Entity.clsvQxUserRolesByUserNumEN,GeneralPlatform.Entity.clsvQxUserRolesByUserNumEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxUserRolesByUserNumENS">源对象</param>
            <param name = "objvQxUserRolesByUserNumENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxUserRolesByUserNumEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetRoleId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesByUserNumDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxUserRolesDA">
            <summary>
            v角色(vQxUserRoles)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxUserRolesDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxUserRolesDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxUserRolesDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strRoleId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strRoleId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetDataTable_vQxUserRoles(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetvQxUserRoles(GeneralPlatform.Entity.clsvQxUserRolesEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxUserRolesEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetObjByRoleId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strRoleId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetvQxUserRolesOneBySP(GeneralPlatform.Entity.clsvQxUserRolesEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxUserRoles_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxUserRolesEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strRoleId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strRoleId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.CopyTo(GeneralPlatform.Entity.clsvQxUserRolesEN,GeneralPlatform.Entity.clsvQxUserRolesEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxUserRolesENS">源对象</param>
            <param name = "objvQxUserRolesENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxUserRolesEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserRolesDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxUsersDA">
            <summary>
            v用户(vQxUsers)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxUsersDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxUsersDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxUsersDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strUserId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strUserId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetDataTable_vQxUsers(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetvQxUsers(GeneralPlatform.Entity.clsvQxUsersEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxUsersEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetObjByUserId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strUserId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetvQxUsersOneBySP(GeneralPlatform.Entity.clsvQxUsersEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxUsers_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxUsersEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strUserId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strUserId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.CopyTo(GeneralPlatform.Entity.clsvQxUsersEN,GeneralPlatform.Entity.clsvQxUsersEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxUsersENS">源对象</param>
            <param name = "objvQxUsersENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxUsersEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxUsersSimDA">
            <summary>
            v用户Sim(vQxUsersSim)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxUsersSimDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxUsersSimDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxUsersSimDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strUserId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strUserId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetDataTable_vQxUsersSim(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetvQxUsersSim(GeneralPlatform.Entity.clsvQxUsersSimEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxUsersSimEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetObjByUserId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strUserId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetvQxUsersSimOneBySP(GeneralPlatform.Entity.clsvQxUsersSimEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxUsersSim_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxUsersSimEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strUserId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strUserId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.CopyTo(GeneralPlatform.Entity.clsvQxUsersSimEN,GeneralPlatform.Entity.clsvQxUsersSimEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxUsersSimENS">源对象</param>
            <param name = "objvQxUsersSimENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxUsersSimEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetUserId">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsersSimDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxUsers_SchoolDA">
            <summary>
            vUsers_School(vQxUsers_School)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxUsers_SchoolDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strUserId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strUserId">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetDataTable_vQxUsers_School(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetvQxUsers_School(GeneralPlatform.Entity.clsvQxUsers_SchoolEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxUsers_SchoolEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetObjByUserId(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strUserId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetvQxUsers_SchoolOneBySP(GeneralPlatform.Entity.clsvQxUsers_SchoolEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxUsers_School_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxUsers_SchoolEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strUserId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strUserId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.CopyTo(GeneralPlatform.Entity.clsvQxUsers_SchoolEN,GeneralPlatform.Entity.clsvQxUsers_SchoolEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxUsers_SchoolENS">源对象</param>
            <param name = "objvQxUsers_SchoolENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxUsers_SchoolEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUsers_SchoolDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvSubjectRelationDA">
            <summary>
            v隶属关系(vSubjectRelation)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvSubjectRelationDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvSubjectRelationDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvSubjectRelationDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetDataTable_vSubjectRelation(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetvSubjectRelation(GeneralPlatform.Entity.clsvSubjectRelationEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvSubjectRelationEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetvSubjectRelationOneBySP(GeneralPlatform.Entity.clsvSubjectRelationEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vSubjectRelation_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvSubjectRelationEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.CopyTo(GeneralPlatform.Entity.clsvSubjectRelationEN,GeneralPlatform.Entity.clsvSubjectRelationEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvSubjectRelationENS">源对象</param>
            <param name = "objvSubjectRelationENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvSubjectRelationEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvSubjectRelationDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsXzClgDA">
            <summary>
            XzClg(XzClg)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsXzClgDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsXzClgDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsXzClgDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strIdXzCollege">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strIdXzCollege">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetDataTable_XzClg(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetXzClg(GeneralPlatform.Entity.clsXzClgEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objXzClgEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetObjByIdXzCollege(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strIdXzCollege">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetXzClgOneBySP(GeneralPlatform.Entity.clsXzClgEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程XzClg_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objXzClgEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strIdXzCollege">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strIdXzCollege">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.AddNewRecord(GeneralPlatform.Entity.clsXzClgEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsXzClgEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objXzClgEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsXzClgEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objXzClgEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsXzClgEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objXzClgEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsXzClgEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objXzClgEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.AddnewXzClgBySP(GeneralPlatform.Entity.clsXzClgEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objXzClgEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.AddnewXzClgs(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.Update(GeneralPlatform.Entity.clsXzClgEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objXzClgEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.UpdateBySP(GeneralPlatform.Entity.clsXzClgEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.UpdateBySql2(GeneralPlatform.Entity.clsXzClgEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objXzClgEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsXzClgEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objXzClgEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsXzClgEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objXzClgEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.UpdateBySql2(GeneralPlatform.Entity.clsXzClgEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objXzClgEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strIdXzCollege">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strIdXzCollege">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.DelXzClg(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strIdXzCollege">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.DelXzClg(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.DelXzClgWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.CopyTo(GeneralPlatform.Entity.clsXzClgEN,GeneralPlatform.Entity.clsXzClgEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objXzClgENS">源对象</param>
            <param name = "objXzClgENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.CheckPropertyNew(GeneralPlatform.Entity.clsXzClgEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.CheckProperty4Update(GeneralPlatform.Entity.clsXzClgEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.CheckProperty4Condition(GeneralPlatform.Entity.clsXzClgEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetIdXzCollege">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzClgDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsXzGradeBaseDA">
            <summary>
            年级(XzGradeBase)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsXzGradeBaseDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsXzGradeBaseDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsXzGradeBaseDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.CheckPrimaryKey(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey)
            </summary>
            <param name = "strIdGradeBase">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.CheckPrimaryKey_Sim(System.String)">
            <summary>
            检查表关键字是否合法,是否含有SQL注入
            (AutoGCLib.clsGeneCodeBase:GenCheckPrimaryKey_Sim)
            </summary>
            <param name = "strIdGradeBase">关键字</param>
            <returns>是否检查成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetDataTable_XzGradeBase(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetXzGradeBase(GeneralPlatform.Entity.clsXzGradeBaseEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objXzGradeBaseEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetObjByIdGradeBase(System.String)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "strIdGradeBase">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetXzGradeBaseOneBySP(GeneralPlatform.Entity.clsXzGradeBaseEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程XzGradeBase_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objXzGradeBaseEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.IsExist(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "strIdGradeBase">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.IsExistBySP(System.String)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "strIdGradeBase">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.AddNewRecord(GeneralPlatform.Entity.clsXzGradeBaseEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsXzGradeBaseEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objXzGradeBaseEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsXzGradeBaseEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objXzGradeBaseEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsXzGradeBaseEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objXzGradeBaseEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsXzGradeBaseEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objXzGradeBaseEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.AddnewXzGradeBaseBySP(GeneralPlatform.Entity.clsXzGradeBaseEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objXzGradeBaseEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.AddnewXzGradeBases(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.Update(GeneralPlatform.Entity.clsXzGradeBaseEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objXzGradeBaseEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.UpdateBySP(GeneralPlatform.Entity.clsXzGradeBaseEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.UpdateBySql2(GeneralPlatform.Entity.clsXzGradeBaseEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objXzGradeBaseEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsXzGradeBaseEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objXzGradeBaseEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsXzGradeBaseEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objXzGradeBaseEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.UpdateBySql2(GeneralPlatform.Entity.clsXzGradeBaseEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objXzGradeBaseEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.DelRecordBySP(System.String)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "strIdGradeBase">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.DelRecord(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "strIdGradeBase">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.DelXzGradeBase(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.DelRecord(System.String)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "strIdGradeBase">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.DelXzGradeBase(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.DelXzGradeBaseWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.CopyTo(GeneralPlatform.Entity.clsXzGradeBaseEN,GeneralPlatform.Entity.clsXzGradeBaseEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objXzGradeBaseENS">源对象</param>
            <param name = "objXzGradeBaseENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.CheckPropertyNew(GeneralPlatform.Entity.clsXzGradeBaseEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.CheckProperty4Update(GeneralPlatform.Entity.clsXzGradeBaseEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.CheckProperty4Condition(GeneralPlatform.Entity.clsXzGradeBaseEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetIdGradeBase">
            <summary>
            获取用于绑定下拉框的DataTable,获取两个字段:1、关键字；2、名称字段
            (AutoGCLib.clsGeneCodeBase:Gen_4DAL_GetDataTable4DdlBind)
            </summary>
            <returns>返回用于绑定下拉框的DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsXzGradeBaseDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxRolePotenceV2DA">
            <summary>
            角色权限关系V2(QxRolePotenceV2)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxRolePotenceV2DA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxRolePotenceV2DA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxRolePotenceV2DA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetDataTable_QxRolePotenceV2(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetQxRolePotenceV2(GeneralPlatform.Entity.clsQxRolePotenceV2EN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxRolePotenceV2EN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetObjByKeyLst(System.Int32,System.Int32)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "intRId">表关键字</param>
            <param name = "intPId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetQxRolePotenceV2OneBySP(GeneralPlatform.Entity.clsQxRolePotenceV2EN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxRolePotenceV2_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxRolePotenceV2EN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.IsExist(System.Int32,System.Int32)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "intRId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.IsExistBySP(System.Int32,System.Int32)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "intRId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.AddNewRecord(GeneralPlatform.Entity.clsQxRolePotenceV2EN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxRolePotenceV2EN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxRolePotenceV2EN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxRolePotenceV2EN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxRolePotenceV2EN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxRolePotenceV2EN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxRolePotenceV2EN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxRolePotenceV2EN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxRolePotenceV2EN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.AddnewQxRolePotenceV2BySP(GeneralPlatform.Entity.clsQxRolePotenceV2EN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxRolePotenceV2EN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.AddnewQxRolePotenceV2s(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.Update(GeneralPlatform.Entity.clsQxRolePotenceV2EN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxRolePotenceV2EN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.UpdateBySP(GeneralPlatform.Entity.clsQxRolePotenceV2EN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.UpdateBySql2(GeneralPlatform.Entity.clsQxRolePotenceV2EN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxRolePotenceV2EN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxRolePotenceV2EN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxRolePotenceV2EN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxRolePotenceV2EN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxRolePotenceV2EN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.UpdateBySql2(GeneralPlatform.Entity.clsQxRolePotenceV2EN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxRolePotenceV2EN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.DelRecordBySP(System.Int32,System.Int32)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "intRId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.DelRecord(System.Int32,System.Int32,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "intRId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.DelRecKeyLsts(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.DelRecord(System.Int32,System.Int32)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "intRId">给定的关键字值</param>
            <param name = "intPId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.DelQxRolePotenceV2(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.DelQxRolePotenceV2WithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.CopyTo(GeneralPlatform.Entity.clsQxRolePotenceV2EN,GeneralPlatform.Entity.clsQxRolePotenceV2EN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxRolePotenceV2ENS">源对象</param>
            <param name = "objQxRolePotenceV2ENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.CheckPropertyNew(GeneralPlatform.Entity.clsQxRolePotenceV2EN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.CheckProperty4Update(GeneralPlatform.Entity.clsQxRolePotenceV2EN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxRolePotenceV2EN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxRolePotenceV2DA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsQxUserGroupPotenceDA">
            <summary>
            用户权限关系(QxUserGroupPotence)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsQxUserGroupPotenceDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetDataTable_QxUserGroupPotence(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetQxUserGroupPotence(GeneralPlatform.Entity.clsQxUserGroupPotenceEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objQxUserGroupPotenceEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetQxUserGroupPotenceOneBySP(GeneralPlatform.Entity.clsQxUserGroupPotenceEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程QxUserGroupPotence_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objQxUserGroupPotenceEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.AddNewRecord(GeneralPlatform.Entity.clsQxUserGroupPotenceEN)">
            <summary>
            添加新记录
            (AutoGCLib.DALCode4CSharp:GenAddNewRecord)
            </summary>
            <returns>添加是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUserGroupPotenceEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2)
            </summary>
            <param name = "objQxUserGroupPotenceEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUserGroupPotenceEN)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKey)
            </summary>
            <param name = "objQxUserGroupPotenceEN">需要添加的实体对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.AddNewRecordBySQL2WithReturnKey(GeneralPlatform.Entity.clsQxUserGroupPotenceEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来插入记录,该方式是优化方式,同时返回新插入记录的关键字的值.(带事务处理)(针对Identity关键字)
            /// 优点:1、能够处理字段中的单撇问题；2、能够使字段值为NULL的字段无需插入；3、返回新插入记录的关键字的值
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQL2WithReturnKeyAndTransaction)
            </summary>
            <param name = "objQxUserGroupPotenceEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回新插入记录的关键字的值,否则就报错</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.AddNewRecordBySQL2(GeneralPlatform.Entity.clsQxUserGroupPotenceEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:通过SQL命令来插入记录
            主要用于上传文件时。
            (AutoGCLib.DALCode4CSharp:GenAddNewRecordBySQLWithTransaction2)
            </summary>
            <param name = "objQxUserGroupPotenceEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.AddnewQxUserGroupPotenceBySP(GeneralPlatform.Entity.clsQxUserGroupPotenceEN)">
            <summary>
            功能:通过存储过程来插入记录
            (AutoGCLib.DALCode4CSharp:GenAddnewRecBySP)
            </summary>
            <param name = "objQxUserGroupPotenceEN">需要添加到数据库中的对象</param>
            <returns>如果插入成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.AddnewQxUserGroupPotences(System.Data.DataTable)">
            <summary>
            把多条记录同时插入到表中!
            (AutoGCLib.DALCode4CSharp:GenAddnewMultiRec)
            </summary>
            <param name = "oDT"></param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.Update(GeneralPlatform.Entity.clsQxUserGroupPotenceEN)">
            <summary>
            功能:通过ADO修改记录
            (AutoGCLib.DALCode4CSharp:GenUpdate)
            </summary>
            <param name = "objQxUserGroupPotenceEN">需要修改到数据库中的对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.UpdateBySP(GeneralPlatform.Entity.clsQxUserGroupPotenceEN)">
            <summary>
            /// 功能:通过存储过程(StoreProcedure)来修改记录
            /// 缺点:1、不能支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySP)
            </summary>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.UpdateBySql2(GeneralPlatform.Entity.clsQxUserGroupPotenceEN)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySql2)
            </summary>
            <param name = "objQxUserGroupPotenceEN">需要添加的实体对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.UpdateBySqlWithCondition(GeneralPlatform.Entity.clsQxUserGroupPotenceEN,System.String)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是非优化方式,根据条件修改记录
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithCondition)
            </summary>
            <param name = "objQxUserGroupPotenceEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.UpdateBySqlWithConditionTransaction(GeneralPlatform.Entity.clsQxUserGroupPotenceEN,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式,根据条件修改记录.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithConditionTransaction)
            </summary>
            <param name = "objQxUserGroupPotenceEN">需要修改的对象</param>
            <param name = "strCondition">修改记录时的条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.UpdateBySql2(GeneralPlatform.Entity.clsQxUserGroupPotenceEN,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            /// 功能:通过SQL命令来修改记录,该方式是优化方式.(带事务处理)
            /// 优点:1、能够处理字段中的单撇问题；
            /// 2、能够处理脏字段,即只有修改过的字段才需要修改同步到数据库;
            /// 3、支持事务处理.
            (AutoGCLib.DALCode4CSharp:GenUpdateBySqlWithTransaction2)
            </summary>
            <param name = "objQxUserGroupPotenceEN">需要添加的实体对象</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>如果修改成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.DelRecordBySP(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录,通过存储过程(SP)来删除。
            (AutoGCLib.DALCode4CSharp:GenDelRecordBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>如果删除成功则返回TRUE,否则为FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.DelRecord(System.Int64,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除关键字所指的记录,使用事务
            (AutoGCLib.clsGeneCodeBase:GenDelRecordWithTransaction)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回删除是否成功?。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.DelQxUserGroupPotence(System.Collections.Generic.List{System.String})">
            <summary>
            功能:同时删除多条记录,删除给定关键字列表的记录
            (AutoGCLib.clsGeneCodeBase:GenDelMultiRec)
            </summary>
            <param name = "lstKey">给定的关键字值列表</param>
            <returns>返回删除是否成功?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.DelRecord(System.Int64)">
            <summary>
            功能:删除关键字所指定的记录
            (AutoGCLib.DALCode4CSharp:GenDelRecord)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回删除的记录数</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.DelQxUserGroupPotence(System.String)">
            <summary>
            功能:删除满足条件的多条记录
            (AutoGCLib.clsGeneCodeBase:GenDelCondRec)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <returns>返回删除的记录数。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.DelQxUserGroupPotenceWithTransaction_S(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            功能:删除满足条件的多条记录,同时处理事务
            (AutoGCLib.clsGeneCodeBase:GenDelCondRecWithTransaction)
            </summary>
            <param name = "strCondition">需要删除的记录条件</param>
            <param name = "objSqlConnection">Sql连接对象</param>
            <param name = "objSqlTransaction">Sql事务对象</param>
            <returns>返回是否删除成功。</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.CopyTo(GeneralPlatform.Entity.clsQxUserGroupPotenceEN,GeneralPlatform.Entity.clsQxUserGroupPotenceEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objQxUserGroupPotenceENS">源对象</param>
            <param name = "objQxUserGroupPotenceENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.CheckPropertyNew(GeneralPlatform.Entity.clsQxUserGroupPotenceEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.CheckProperty4Update(GeneralPlatform.Entity.clsQxUserGroupPotenceEN)">
            <summary>
            专业针对修改记录,检查对象字段值是否合法,1)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckPropertyNew)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.CheckProperty4Condition(GeneralPlatform.Entity.clsQxUserGroupPotenceEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetUniCondStr(GeneralPlatform.Entity.clsQxUserGroupPotenceEN)">
            <summary>
            获取唯一性条件串(Uniqueness)--QxUserGroupPotence(用户权限关系),根据唯一约束条件来生成
            (AutoGCLib.clsGeneCodeBase:GenGetUniquenessConditionString)
            </summary>
            <param name = "objQxUserGroupPotenceEN">表对象</param>
            <returns>返回唯一性条件串</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsQxUserGroupPotenceDA.SetFldValue``1(System.String,System.String,``0,System.String)">
            <summary>
            功能:设置给定表中的符合条件的某字段的值
            (AutoGCLib.DALCode4CSharp:GenfunSetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "varValue">值</param>
            <param name = "strCondition">条件串</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="T:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA">
            <summary>
            v用户权限关系(vQxUserGroupPotence)
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.EXCEPTION_MSG">
            <summary>
            错误信息
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="F:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.mstrModuleName">
            <summary>
            模块名称
            (AutoGCLib.DALCode4CSharp:GeneCode)
            </summary>
        </member>
        <member name="P:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA._CurrTabName">
            <summary>
            当前表名
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetSpecSQLObj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.DALCode4CSharp:Gen_GetSpecSQLObj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetSpecSQLObj_Obj">
            <summary>
            获取SQL服务器连接对象
            (AutoGCLib.clsGeneCodeBase:Gen_GetSpecSQLObj_Obj)
            </summary>
            <returns>SQL服务器连接对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetDataSet(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCond_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetDataSetByCondBySP(System.String)">
            <summary>
            根据条件获取当前表的数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查,用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetDataSet_Top(System.Int32,System.String)">
            <summary>
            根据条件获取当前表的顶部数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetTopDataSetByCond_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetDataSetByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围数据集,用DataSet表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetDataSetByRange(System.String,System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns>返回数据集DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetDataSetByRange(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataSet表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataSetByCondByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns>返回满足条件一定范围的DataSet</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetDataTable(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetDataTable_vQxUserGroupPotence(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetDataTable(System.String,System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(给定表名)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetDataTable(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetDataTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetDataTable(System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTable_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByTabName_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strTabName">表名</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetDataTable_Top(com.taishsoft.common.stuTopPara)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "objTopPara">获取顶部对象列表的参数对象</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetDataTable_Top(System.Int32,System.String,System.String)">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetDataTable_Top(System.Int32,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取顶部记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_Exclude)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetDataTable_Top(System.Int32,System.String,System.Boolean)">
            <summary>
            根据条件获取顶部记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:Gen_GetDataTable_Top_S_IsCheckSQLAttack)
            </summary>
            <param name = "intTopSize">顶部记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取分页记录的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_Exclude)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetDataTableByPager(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            根据条件获取分页记录数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByPager_S_IsCheckSQLAttack)
            </summary>
            <param name = "intPageIndex">页序号</param>
            <param name = "intPageSize">页记录数</param>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查(带排除)
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_Exclude)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <param name = "lstExclude">排除的检查字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetDataTableByRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据条件获取一定范围的数据表,用DataTable表示,同时可以决定是否检查SQL攻击
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableByRange_S_IsCheckSQLAttack)
            </summary>
            <param name = "strCondition">条件串</param>
            <param name = "bolIsCheckSQLAttack">是否检查Sql攻击</param>
            <param name = "strOrderBy">排序方式</param>
            <param name = "intMinNum">范围之最小值</param>
            <param name = "intMaxNum">范围之最大值</param>
            <returns></returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetDataTableByCondBySP(System.String)">
            <summary>
            根据条件获取数据表,用DataTable表示,同时检查是否含有SQL攻击-弱检查, 用存储过程来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetDataTableBySP_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回数据表DataTable</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetObjLst(System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLst)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetObjLstByTabName(System.String,System.String)">
            <summary>
            根据条件获取对象列表
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstByTabName)
            </summary>
            <param name = "strCondition">给定条件</param>
            <param name = "strTabName">表名</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetObjLstBySP(System.String)">
            <summary>
            根据条件获取对象列表,使用存储过程
            (AutoGCLib.clsGeneCodeBase:GenGetObjLstBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetvQxUserGroupPotence(GeneralPlatform.Entity.clsvQxUserGroupPotenceEN@)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:GenGetRecValue)
            </summary>
            <param name = "objvQxUserGroupPotenceEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetObjBymId(System.Int64)">
            <summary>
            根据关键字获取相关对象,用对象的形式表示.
            (AutoGCLib.DALCode4CSharp:Gen_GetObjByKeyId)
            </summary>
            <param name = "lngmId">表关键字</param>
            <returns>表对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetvQxUserGroupPotenceOneBySP(GeneralPlatform.Entity.clsvQxUserGroupPotenceEN)">
            <summary>
            获取当前关键字的记录对象,用对象的形式表示.用存储过程vQxUserGroupPotence_SelectOne来获取。
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueBySP)
            </summary>
            <param name = "objvQxUserGroupPotenceEN">需要添加到数据库中的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetFirstObj(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObj)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetFirstObjBySP(System.String)">
            <summary>
            获取第一条满足条件的记录,以对象形式表示,用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenGetFirstCondRecObjBySP)
            </summary>
            <param name = "strCondition">给定条件</param>
            <returns>返回满足条件的第一个对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetObjByDataRow(System.Data.DataRow)">
            <summary>
            把DataRow转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRow</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetObjByDataRow(System.Data.DataRowView)">
            <summary>
            把DataRowView转换成记录对象.
            (AutoGCLib.clsGeneCodeBase:GenGetRecValueObjByDataRow)
            </summary>
            <param name = "objRow">所给的DataRowView</param>
            <returns>记录对象</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetMaxStrId">
            <summary>
            获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrID)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetMaxStrIdByPrefix(System.String)">
            <summary>
            根据前缀获取当前表最大字符型关键字ID
            (AutoGCLib.clsGeneCodeBase:GenGetMaxStrIdByPrefix)
            </summary>
            <returns>返回的最大关键字值ID</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetFirstID(System.String)">
            <summary>
            获取当前表满足条件的第一条记录的关键字值
            (AutoGCLib.clsGeneCodeBase:GenGetFirstID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的第一条记录的关键字值</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetID(System.String)">
            <summary>
            获取当前表满足条件的所有记录的关键字值列表
            (AutoGCLib.clsGeneCodeBase:GenGetPrimaryKeyID)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>返回的关键字值列表</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.IsExist(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExist_S)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.IsExistBySP(System.Int64)">
            <summary>
            判断当前表中是否存在给定关键字值的记录, 用存储过程来获取
            (AutoGCLib.clsGeneCodeBase:GenIsExistBySP)
            </summary>
            <param name = "lngmId">给定的关键字值</param>
            <returns>返回是否存在?</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.IsExistCondRec(System.String)">
            <summary>
            功能:判断是否存在某一条件的记录
            (AutoGCLib.clsGeneCodeBase:GenIsExistCondRec_S)
            </summary>
            <param name = "strCondition">条件串</param>
            <returns>如果存在就返回TRUE,否则返回FALSE</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.IsExistTable">
            <summary>
            检查是否存在当前表
            (AutoGCLib.clsGeneCodeBase:GenIsExistTable)
            </summary>
            <returns>存在就返回True,否则返回False</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.CopyTo(GeneralPlatform.Entity.clsvQxUserGroupPotenceEN,GeneralPlatform.Entity.clsvQxUserGroupPotenceEN)">
            <summary>
            把同一个类的对象,复制到另一个对象
            (AutoGCLib.clsGeneCodeBase:GenCopyObj_S)
            </summary>
            <param name = "objvQxUserGroupPotenceENS">源对象</param>
            <param name = "objvQxUserGroupPotenceENT">目标对象</param>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.CheckProperty4Condition(GeneralPlatform.Entity.clsvQxUserGroupPotenceEN)">
            <summary>
            检查对象字段值是否合法,1)检查是否可空;2)检查字段值长度是否超长,如果出错就抛出错误.
            (AutoGCLib.clsGeneCodeBase:GenCheckProperty4Condition)
            </summary>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetRecCount(System.String)">
            <summary>
            功能:获取当前表的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetRecCountByCond(System.String,System.String)">
            <summary>
            功能:获取给定表中满足条件的记录数, 该表与当前类不相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond_S)
            </summary>
            <param name = "strTabName">所给定的表名</param>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetRecCount">
            <summary>
            功能:获取当前表的记录数.该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCount)
            </summary>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetRecCountByCond(System.String)">
            <summary>
            功能:获取当前表中满足条件的记录数, 该表与当前类相关。
            (AutoGCLib.DALCode4CSharp:GenGetRecCountByCond)
            </summary>
            <param name = "strCondition">所给定的记录条件</param>
            <returns>记录数,为整型</returns>
        </member>
        <member name="M:GeneralPlatform.DAL.clsvQxUserGroupPotenceDA.GetFldValue(System.String,System.String,System.String)">
            <summary>
            功能:获取给定表中的符合条件的某字段的值,以列表返回
            (AutoGCLib.DALCode4CSharp:GenGetFldValue_S)
            </summary>
            <param name = "strTabName">表名</param>
            <param name = "strFldName">字段名</param>
            <param name = "strCondition">条件串</param>
            <returns>获取的字段值列表</returns>
        </member>
    </members>
</doc>
