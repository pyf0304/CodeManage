
@page
@{
    Layout = "~/Pages/Shared/_Layout_PC.cshtml";
    ViewData["Title"] = "知识点逻辑图维护";
}
@section Styles{
    <link rel="stylesheet" href="../lib/bootstrap/dist/css/bootstrap.css" />
    <link rel="stylesheet" href="~/lib/Xadmin/css/font.css">
    <link rel="stylesheet" href="~/lib/Xadmin/css/xadmin.css">
    @*<link rel="stylesheet" href="../css/site.css" />*@
    <link rel="shortcut icon" href="~/images/favicon.ico" type="image/x-icon" />
}
@section Scripts{
    <script src="../lib/jquery/dist/jquery.js"></script>
    <script src="~/lib/Xadmin/lib/layui/layui.js" charset="utf-8"></script>
    <script type="text/javascript" src="~/lib/Xadmin/js/xadmin.js"></script>

    <script src="~/lib/xlsx.core.min.js" type="text/javascript"></script>
    <script src="~/lib/xlsx.full.min.js" type="text/javascript"></script>
    <script>
        layui.use(['laydate', 'form'],
            function () {
                var laydate = layui.laydate;

                //执行一个laydate实例
                laydate.render({
                    elem: '#txtUpdDate_q' //指定元素
                });

            });
    </script>
    <script src="../lib/require/require.js" data-main="../js/src/config"></script>
}
<script>
    //所有用户自定义的JS函数建议都放在这里


</script>
<script>

    /*
     按钮单击,用于调用Js函数中btn_Click
    (AutoGCLib.WA_ViewScript_TS4Html:Gen_WApi_JS_btn_Click)
    */
    function btn_Click(strCommandName, strKeyId) {
        require(["../js/Knowledges/gs_KnowledgesGraphCRUDEx.js"], function (gs_knowledgesgraph) {
            gs_knowledgesgraph.gs_KnowledgesGraphCRUDEx.btn_Click(strCommandName, strKeyId);
        });
    }

    /*
     单击数据列表中每行首列的复选框所引发的事件
    (AutoGCLib.WA_ViewScript_TS4Html:Gen_WApi_JS_ChkClick)
    */
    function ChkClick(myThis) {
        require(["../js/Knowledges/gs_KnowledgesGraphCRUDEx.js", "../js/TS/PubFun/clsCommonFunc4Web.js"], function (gs_knowledgesgraph, commonfunc) {
            var strId = myThis.id;
            var strKey = strId.substring(3);
            var arrKeys = commonfunc.arrSelectedKeys;
            if (myThis.checked == true) {
                if (arrKeys.indexOf(strKey) < 0) {
                    arrKeys.push(strKey);
                }
            }
            else {
                var index = arrKeys.indexOf(strKey);
                if (index > -1) {
                    arrKeys.splice(index, 1);
                }
            }
            var sstrKey = "";
            for (let strK of arrKeys) {
                sstrKey += `${strK},`;
            }
            $('#spanResult').html(sstrKey);
        });
    }

    /*
     获取数据列表中的所选记录
    (AutoGCLib.WA_ViewScript_TS4Html:Gen_WApi_JS_GetAllCkechedKeys)
    */
    function GetAllCkechedKeys(tabName) {
        var arrKeys = tabName.getElementsByTagName('chkInTab');
        alert(arrKeys.length.toString());
    }

    /*
     修改记录
    (AutoGCLib.WA_ViewScript_TS4Html:Gen_WApi_JS_IndexPage)
    */
    function IndexPage(intPageIndex) {
        console.log("跳转到" + intPageIndex + "页");
        require(["../js/Knowledges/gs_KnowledgesGraphCRUDEx.js"], function (gs_knowledgesgraph) {
            var objPage = new gs_knowledgesgraph.gs_KnowledgesGraphCRUDEx();
            objPage.IndexPage(intPageIndex);
        });
    }

    /*
     修改记录
    (AutoGCLib.WA_ViewScript_TS4Html:Gen_WApi_JS_JumpToPage)
    */
    function JumpToPage() {
        var intCurrPageIndex = $('#input_number').val();
        var intPageIndex = Number(intCurrPageIndex);
        console.log("跳转到" + intPageIndex + "页");
        require(["../js/Knowledges/gs_KnowledgesGraphCRUDEx.js"], function (gs_knowledgesgraph) {
            var objPage = new gs_knowledgesgraph.gs_KnowledgesGraphCRUDEx();
            objPage.IndexPage(intPageIndex);
        });
    }

    /*
     修改记录
    (AutoGCLib.WA_ViewScript_TS4Html:Gen_WApi_JS_NextPage)
    */
    function NextPage() {
        var intCurrPageIndex = $('#hidCurrPageIndex').val();
        var intPageIndex = Number(intCurrPageIndex) + 1;
        console.log("跳转到" + intPageIndex + "页");
        require(["../js/Knowledges/gs_KnowledgesGraphCRUDEx.js"], function (gs_knowledgesgraph) {
            var objPage = new gs_knowledgesgraph.gs_KnowledgesGraphCRUDEx();
            objPage.IndexPage(intPageIndex);
        });
    }

    /*
     页面导入-在导入页面后运行的函数
    (AutoGCLib.WA_ViewScript_TS4Html:Gen_WApi_JS_Page_Load)
    */
    window.onload = function () {
        require(["../js/Knowledges/gs_KnowledgesGraphCRUDEx.js"], function (gs_knowledgesgraph) {
            var objPage = new gs_knowledgesgraph.gs_KnowledgesGraphCRUDEx();
            objPage.Page_Load();
        });
    }

    /*
     修改记录
    (AutoGCLib.WA_ViewScript_TS4Html:Gen_WApi_JS_PageNum)
    */
    function PageNum(intPageIndex) {
        console.log("跳转到" + intPageIndex + "页");
        require(["../js/Knowledges/gs_KnowledgesGraphCRUDEx.js"], function (gs_knowledgesgraph) {
            var objPage = new gs_knowledgesgraph.gs_KnowledgesGraphCRUDEx();
            objPage.IndexPage(intPageIndex);
        });
    }

    /*
     修改记录
    (AutoGCLib.WA_ViewScript_TS4Html:Gen_WApi_JS_PrevPage)
    */
    function PrevPage() {
        var intCurrPageIndex = $('#hidCurrPageIndex').val();
        var intPageIndex = Number(intCurrPageIndex) - 1;
        console.log("跳转到" + intPageIndex + "页");
        require(["../js/Knowledges/gs_KnowledgesGraphCRUDEx.js"], function (gs_knowledgesgraph) {
            var objPage = new gs_knowledgesgraph.gs_KnowledgesGraphCRUDEx();
            objPage.IndexPage(intPageIndex);
        });
    }

    /*
详细记录
(AutoGCLib.WA_ViewScript_TS4CSharp:btnDetailRecord_Click)
*/
    function btnDetailRecordInTab_Click(strKeyId) {

        xadmin.open('知识点逻辑结构图', '../Knowledges/LogicRela?KnowledgeGraphId=' + strKeyId, '', '', true)

        //require(["../js/Knowledges/gs_KnowledgesGraphCRUDEx.js"], function (gs_knowledgesgraph) {
        //    if (strKeyId == "") {
        //        alert("请选择需要查看的记录！");
        //        return;
        //    }
        //    //window.location.href = "../GraduateEduEx/PaperDetail?PaperId=" + strKeyId;

        //    //var objPage = new paperreadwrite.PaperReadWrite_QUDI_TSEx();
        //    //objPage.btnDetailRecord_Click();
        //});
    }

</script>
<script>
// 将一个sheet转成最终的excel文件的blob对象，然后利用URL.createObjectURL下载
function sheet2blob(sheet, sheetName)
{
sheetName = sheetName || 'sheet1';
var workbook = {
SheetNames: [sheetName],
Sheets: {}
};
workbook.Sheets[sheetName] = sheet;
// 生成excel的配置项
var wopts = {
bookType: 'xlsx', // 要生成的文件类型
bookSST: false, // 是否生成Shared String Table，官方解释是，如果开启生成速度会下降，但在低版本IOS设备上有更好的兼容性
type: 'binary'
};
var wbout = XLSX.write(workbook, wopts);
var blob = new Blob([s2ab(wbout)], { type: "application/octet-stream" });
// 字符串转ArrayBuffer
function s2ab(s)
{
var buf = new ArrayBuffer(s.length);
var view = new Uint8Array(buf);
for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
return buf;
}
return blob;
}
@*/**
* 通用的打开下载对话框方法，没有测试过具体兼容性
* @param url 下载地址，也可以是一个blob对象，必选
* @param saveName 保存文件名，可选
*/*@
function openDownloadDialog(url, saveName)
{
if (typeof url == 'object' && url instanceof Blob) {
url = URL.createObjectURL(url); // 创建blob地址
}
var aLink = document.createElement('a');
aLink.href = url;
aLink.download = saveName || ''; // HTML5新增的属性，指定保存文件名，可以不要后缀，注意，file:///模式下不会生效
var event;
if (window.MouseEvent) event = new MouseEvent('click');
else {
event = document.createEvent('MouseEvents');
event.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
}
aLink.dispatchEvent(event);
}
//所有用户自定义的JS函数建议都放在这里
function exportSpecialExcel_pyf(arrData, strFileName)
{
var sheet = XLSX.utils.aoa_to_sheet(arrData);
    openDownloadDialog(sheet2blob(sheet), strFileName);
    }

</script>


<div id="tabLayout" class="tab_layout">
    @*-- 标题层 --*@

    <div class="x-nav">
        <n class="layui-breadcrumb">
            <a href="">首页</a>
            <a href="">个人中心</a>
            <a>
                <cite>知识点逻辑图</cite>
            </a>
            <Label id="lblMsg_List" name="lblMsg_List"></Label>
        </n>
        <a class="layui-btn layui-btn-small" style="line-height:1.6em;margin:0px 0px 0px 5px; float:right" onclick="location.reload()" title="刷新">
            <i class="layui-icon layui-icon-refresh" style="line-height:30px"></i>
        </a>
    </div>

    @*-- 查询层 --*@

    <div id="divQuery" class="div_query">
        <table id="tabQuery" style="width: 60%;" class="table table-bordered table-hover table td table-sm">
            <tr>
                @*<td>
                        <select id="ddlid_CurrEduCls_q" name="ddlid_CurrEduCls_q" class="form-control" style="width:120px;"></select>
                    </td>*@
                <td>
                    <select id="ddlCourseId_q" name="ddlCourseId_q" class="form-control" style="width:120px;"></select>
                </td>
                <td class="text-left">
                    <input id="txtKnowledgeGraphName_q" name="txtKnowledgeGraphName_q" placeholder="知识点图形名称" class="layui-input" style="width:200px;" />
                </td>

                <td>

                    <input id="txtCreateUser_q" name="txtCreateUser_q" placeholder="创建用户" class="layui-input" style="width:150px;" />
                </td>
                <td>
                    <input id="txtUpdDate_q" name="txtUpdDate_q" placeholder="编辑日期" class="layui-input" style="width:150px;" />
                </td>
                <td>
                    <button class="layui-btn" lay-submit="" lay-filter="sreach" onclick="btn_Click('Query')">
                        <i class="layui-icon">&#xe615;</i>
                    </button>

                </td>
            </tr>
        </table>
    </div>


    @*-- 功能区 --*@

    <div id="divFunction" class="table table-bordered table-hover">
        <ul class="nav">
            <li class="nav-item">
                <Label id="lblgs_KnowledgesGraphList" name="lblgs_KnowledgesGraphList" class="col-form-label text-info" style="width:250px;">
                    知识点逻辑图列表
                </Label>
            </li>
            <li class="nav-item ml-3">
                <button id="btnAddNewRecordWithMaxId" name="btnAddNewRecordWithMaxId" class="btn btn-outline-info btn-sm text-nowrap" onclick="btn_Click('AddNewRecordWithMaxId')">添加</button>
            </li>
            <li class="nav-item ml-3">
                <button id="btnUpdateRecord" name="btnUpdateRecord" class="btn btn-outline-info btn-sm text-nowrap" onclick="btn_Click('Update')">修改</button>
            </li>
            <li class="nav-item ml-3">
                <button id="btnDelRecord" name="btnDelRecord" class="btn btn-outline-info btn-sm text-nowrap" onclick="btn_Click('Delete')">删除</button>
            </li>
            <li class="nav-item ml-3">
                <button id="btnExportExcel" name="btnExportExcel" class="btn btn-outline-warning btn-sm text-nowrap" onclick="btn_Click('ExportExcel')">导出Excel</button>
            </li>
        </ul>
    </div>
    @*-- 列表层 --*@
    <div id="divList" class="div_List">
        <div id="divDataLst" class="div_List">
        </div>
        <div id="divPager" class="pager">
           
        </div>
    </div>
    @*-- 编辑层 --*@
    <div id="divEdit" value="1"></div>
</div>

<input id="hidOpType" type="hidden" />
<input id="hidKeyId" type="hidden" />
<input id="hidCurrPageIndex" type="hidden" value="1" />
<input id="hidSortgs_KnowledgesGraphBy" type="hidden" value="" />